<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RequestMapping注解</title>
      <link href="/post/d7e4307b.html"/>
      <url>/post/d7e4307b.html</url>
      
        <content type="html"><![CDATA[<h1 id="RequestMapping的作用"><a href="#RequestMapping的作用" class="headerlink" title="RequestMapping的作用"></a>RequestMapping的作用</h1><p><code>@RequestMapping</code> 注解是 Spring MVC 框架中的一个控制器映射注解，用于将请求映射到相应的处理方法上。具体来说，它可以将指定 URL 的请求绑定到一个特定的方法或类上，从而实现对请求的处理和响应。</p><h1 id="RequestMapping的出现位置"><a href="#RequestMapping的出现位置" class="headerlink" title="RequestMapping的出现位置"></a>RequestMapping的出现位置</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710318777635-df02afe3-e065-4a05-877e-3a6f8a6eea4e.png#averageHue=%23fdfbfa&amp;clientId=u149a58a6-22bb-4&amp;from=paste&amp;height=601&amp;id=u2ad3fa51&amp;originHeight=601&amp;originWidth=774&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=92825&amp;status=done&amp;style=none&amp;taskId=u6b548f73-490a-41c9-bbab-2db00cd31b9&amp;title=&amp;width=774" alt="image.png"><br>通过RequestMapping的源码可以看到RequestMapping注解只能出现在类上或者方法上。</p><h1 id="类上与方法上结合使用"><a href="#类上与方法上结合使用" class="headerlink" title="类上与方法上结合使用"></a>类上与方法上结合使用</h1><p>我们先来看，在同一个web应用中，是否可以有两个完全一样的RequestMapping。测试一下：假设两个RequestMapping，其中一个是展示用户详细信息，另一个是展示商品详细信息。提供两个Controller，一个是UserController，另一个是ProductController。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: UserController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: ProductController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>以上两个Controller的RequestMapping相同，都是”/detail”，我们来启动服务器看会不会出现问题：异常发生了，异常信息如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: </span><br><span class="line">Error creating bean with name <span class="string">&#x27;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&#x27;</span>: </span><br><span class="line">Ambiguous mapping. Cannot map <span class="string">&#x27;userController&#x27;</span> method </span><br><span class="line">com.powernode.springmvc.controller.UserController#toDetail()</span><br><span class="line">to &#123; [/detail]&#125;: There is already <span class="string">&#x27;productController&#x27;</span> bean method</span><br><span class="line">com.powernode.springmvc.controller.ProductController#toDetail() mapped.</span><br></pre></td></tr></table></figure><br>以上异常信息大致的意思是：不明确的映射。无法映射UserController中的toDetail()方法，因为已经在ProductController中映射过了！！！！<br>通过测试得知，在同一个webapp中，RequestMapping必须具有唯一性。怎么解决以上问题？两种解决方案：</p><ul><li>第一种方案：将方法上RequestMapping的映射路径修改的不一样。</li><li>第二种方案：在类上添加RequestMapping的映射路径，以类上的RequestMapping作为命名空间，来加以区分两个不同的映射。</li></ul><h2 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h2><p>将方法上RequestMapping的映射路径修改的不一样。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/product/detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/product/detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再次启动web服务器，会发现没有再报错了。<br>为这两个请求分别提供对应的视图页面：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710321603074-a058da54-46c1-45c2-9a16-08759212e879.png#averageHue=%23ecf0f9&amp;clientId=u536eeef9-a13d-4&amp;from=paste&amp;height=218&amp;id=u5429a195&amp;originHeight=218&amp;originWidth=301&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12656&amp;status=done&amp;style=none&amp;taskId=ud67c1285-e182-45fd-901a-220c180f602&amp;title=&amp;width=301" alt="image.png"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商品详情页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户详情页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在首页面添加两个超链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/detail&#125;&quot;</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/detail&#125;&quot;</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>启动Tomcat服务器，并测试：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710321765401-8615ea50-6537-4a23-9c28-e91cf8d3a957.png#averageHue=%23f9f8f8&amp;clientId=u536eeef9-a13d-4&amp;from=paste&amp;height=257&amp;id=u543e5fcb&amp;originHeight=257&amp;originWidth=398&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13138&amp;status=done&amp;style=none&amp;taskId=u21bda0b6-2b24-4cf4-b8e0-24407d75886&amp;title=&amp;width=398" alt="image.png"><br>点击用户详情，点击商品详情，都可以正常显示：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710323998528-e38bedfd-8915-4dd5-a5ff-47c7f65df143.png#averageHue=%23d5b281&amp;clientId=ub006eeb4-d5e7-4&amp;from=paste&amp;height=219&amp;id=u353f7f40&amp;originHeight=219&amp;originWidth=493&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11545&amp;status=done&amp;style=none&amp;taskId=ub7bf346b-8e18-48bf-b338-5cf89bc4193&amp;title=&amp;width=493" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710324010676-719ba465-0cc1-49bf-a9e6-3d1375dfdc65.png#averageHue=%23f7f7f6&amp;clientId=ub006eeb4-d5e7-4&amp;from=paste&amp;height=241&amp;id=u66baa171&amp;originHeight=241&amp;originWidth=402&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11385&amp;status=done&amp;style=none&amp;taskId=u0a5f7eac-1eca-44f3-bfeb-93abbb39cb4&amp;title=&amp;width=402" alt="image.png"></p><h2 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h2><p>在类上和方法上都使用RequestMapping注解来进行路径的映射。假设在类上映射的路径是”/a”，在方法上映射的路径是”/b”，那么整体表示映射的路径就是：”/a/b”<br>在第一种方案中，假设UserController类中有很多方法，每个方法的 RequestMapping注解中都需要以”/user”开始，显然比较啰嗦，干脆将”/user”提升到类级别上，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: UserController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/user/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: ProductController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/product/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>经过测试，程序可以正常执行！！！</p><h1 id="RequestMapping注解的value属性"><a href="#RequestMapping注解的value属性" class="headerlink" title="RequestMapping注解的value属性"></a>RequestMapping注解的value属性</h1><h2 id="value属性的使用"><a href="#value属性的使用" class="headerlink" title="value属性的使用"></a>value属性的使用</h2><p>value属性是该注解最核心的属性，value属性填写的是请求路径，也就是说通过该请求路径与对应的控制器的方法绑定在一起。另外通过源码可以看到value属性是一个字符串数组：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710329488513-948e1e58-9984-458f-9c01-75601de3c0c8.png#averageHue=%23fcfbf9&amp;clientId=ub006eeb4-d5e7-4&amp;from=paste&amp;height=85&amp;id=ua2fa9331&amp;originHeight=85&amp;originWidth=387&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9261&amp;status=done&amp;style=shadow&amp;taskId=udb4000d7-7671-432d-9b64-b23b32e626f&amp;title=&amp;width=387" alt="image.png"><br>既然是数组，就表示可以提供多个路径，也就是说，在SpringMVC中，多个不同的请求路径可以映射同一个控制器的同一个方法：<br>编写新的控制器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: RequestMappingTestController</span></span><br><span class="line"><span class="comment"> * Description: 测试 RequestMapping 注解</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/14 9:14</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingTestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/testValue1&quot;, &quot;/testValue2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testValue&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>提供视图页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Value<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test RequestMapping&#x27;s Value<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在index.html文件中添加两个超链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/detail&#125;&quot;</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/detail&#125;&quot;</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--测试RequestMapping的value属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testValue1&#125;&quot;</span>&gt;</span>testValue1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testValue2&#125;&quot;</span>&gt;</span>testValue2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>启动服务器，测试，点击以下的两个超链接，发送请求，都可以正常访问到同一个控制器上的同一个方法：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710380856084-a7199701-367e-49d4-856c-843902882df4.png#averageHue=%23f9f9f8&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=304&amp;id=u53a1c730&amp;originHeight=304&amp;originWidth=359&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13782&amp;status=done&amp;style=shadow&amp;taskId=udeae1893-4115-425d-8bf0-379b0d9ba9b&amp;title=&amp;width=359" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710380869186-247c7c9d-4fa7-4896-91ac-16c227cf0751.png#averageHue=%23d7b583&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=212&amp;id=ucd526467&amp;originHeight=212&amp;originWidth=513&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16167&amp;status=done&amp;style=shadow&amp;taskId=ub5846959-c2eb-4a9a-94b8-6bda74ed196&amp;title=&amp;width=513" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710380880908-39caa3a2-020d-4f4b-821d-9a14ab6cfb03.png#averageHue=%23d7b583&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=204&amp;id=u2e13e589&amp;originHeight=204&amp;originWidth=512&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16005&amp;status=done&amp;style=shadow&amp;taskId=u29af56cd-b832-411f-b510-58783f17ef8&amp;title=&amp;width=512" alt="image.png"></p><h2 id="Ant风格的value"><a href="#Ant风格的value" class="headerlink" title="Ant风格的value"></a>Ant风格的value</h2><p>value是可以用来匹配路径的，路径支持模糊匹配，我们把这种模糊匹配称之为Ant风格。关于路径中的通配符包括：</p><ul><li>?，代表任意一个字符</li><li>*，代表0到N个任意字符</li><li>**，代表0到N个任意字符，并且路径中可以出现路径分隔符 /</li></ul><p>注意：** 通配符在使用时，左右不能出现字符，只能是 /</p><p>测试一下这些通配符，在 RequestMappingTestController 中添加以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/x?z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>提供视图页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Value Ant<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的value属性支持模糊匹配<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在index.html页面中编写超链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping注解的value属性支持模糊匹配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/xyz/testValueAnt&#125;&quot;</span>&gt;</span>测试value属性的模糊匹配<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><br>测试结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408304774-c8fdaa73-4aad-43b2-a0b5-27600e45078b.png#averageHue=%23f9f8f7&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=196&amp;id=u81d8f0f8&amp;originHeight=196&amp;originWidth=332&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8387&amp;status=done&amp;style=shadow&amp;taskId=uc0b41afd-6758-4170-b4a7-c8fb4f6c1e8&amp;title=&amp;width=332" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408334347-3ecdd6de-4281-4dda-a31e-bb267496bf76.png#averageHue=%23e9e8e6&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=161&amp;id=ud3097a67&amp;originHeight=161&amp;originWidth=801&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23105&amp;status=done&amp;style=shadow&amp;taskId=ubeaa9b73-45be-4ad1-a667-ddd492e4d24&amp;title=&amp;width=801" alt="image.png"></p><p>通过修改浏览器地址栏上的路径，可以反复测试通配符 ? 的语法：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408441950-b058d7cc-5d1a-42c0-9188-57d294e36c05.png#averageHue=%23ebeae8&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=171&amp;id=udb55bc6f&amp;originHeight=171&amp;originWidth=813&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23361&amp;status=done&amp;style=shadow&amp;taskId=ue28e8160-c985-447c-817a-e74299a39e1&amp;title=&amp;width=813" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408497513-91234ca4-74ae-4681-87b6-066bf68cb60d.png#averageHue=%23eae8e7&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=167&amp;id=u006e21d6&amp;originHeight=167&amp;originWidth=789&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23129&amp;status=done&amp;style=shadow&amp;taskId=u3d5efc45-4431-476d-aa86-445cf51d4d6&amp;title=&amp;width=789" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408554224-46bdf1bb-0fb9-4214-b30c-9b9a73973ff7.png#averageHue=%23e8e6e5&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=156&amp;id=ufc167ac5&amp;originHeight=156&amp;originWidth=786&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22991&amp;status=done&amp;style=shadow&amp;taskId=uc0692ffc-ac7e-46f6-a9cd-c8ef334e9c8&amp;title=&amp;width=786" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408520959-fdf3be9b-341c-4f9f-9d48-0b1b76e1b5b3.png#averageHue=%23e6c692&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=276&amp;id=u6694dbe1&amp;originHeight=276&amp;originWidth=562&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21138&amp;status=done&amp;style=shadow&amp;taskId=ucfb93bfa-7af8-4e60-b763-619def0d1fb&amp;title=&amp;width=562" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408535497-902d0a9a-8fbf-4b9d-b171-a6fa5b425900.png#averageHue=%23e6c692&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=286&amp;id=u0149d972&amp;originHeight=286&amp;originWidth=557&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21035&amp;status=done&amp;style=shadow&amp;taskId=ub8b3dfe9-8bd5-47e9-bccc-b5d7ab5c352&amp;title=&amp;width=557" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408461985-6de127ca-d27f-40af-be89-71f2d1e298f1.png#averageHue=%23e6c794&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=274&amp;id=ub4603a17&amp;originHeight=274&amp;originWidth=572&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20722&amp;status=done&amp;style=shadow&amp;taskId=ud8e003d2-1dca-4907-99e2-5243fd6172d&amp;title=&amp;width=572" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710408477041-0b7f3fc7-8ab2-4b1b-acb0-54fa009c5df1.png#averageHue=%23e6c692&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=289&amp;id=u844d5d11&amp;originHeight=289&amp;originWidth=577&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21172&amp;status=done&amp;style=shadow&amp;taskId=u17a48bb5-b555-40b7-a3a5-098bb35a22a&amp;title=&amp;width=577" alt="image.png"></p><p>将 ? 通配符修改为 * 通配符：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(&quot;/x?z/testValueAnt&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/x*z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>打开浏览器直接在地址栏上输入路径进行测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710409236128-4faa78a0-8da7-46b5-a466-58259918354a.png#averageHue=%23e9e7e6&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=159&amp;id=udaa45e31&amp;originHeight=159&amp;originWidth=797&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23274&amp;status=done&amp;style=shadow&amp;taskId=u07fa12c6-f90e-473f-be1d-c16415bac39&amp;title=&amp;width=797" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710409281578-57812acc-e94c-441f-91cf-35ed19c0912d.png#averageHue=%23e9e7e6&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=155&amp;id=u8c48fc58&amp;originHeight=155&amp;originWidth=823&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23112&amp;status=done&amp;style=shadow&amp;taskId=ud351839f-0670-48b1-9148-dd142e0c569&amp;title=&amp;width=823" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710409267167-adb48ec7-861c-40f2-8a92-c1a4368de9fe.png#averageHue=%23e5c692&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=272&amp;id=u685780a5&amp;originHeight=272&amp;originWidth=556&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21012&amp;status=done&amp;style=shadow&amp;taskId=ub93fc575-2c72-4cf9-8013-b09b5f3d827&amp;title=&amp;width=556" alt="image.png"></p><p>将 <em> 通配符修改为 *</em> 通配符：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/x**z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710409419674-7475d2c4-989a-4547-9f8c-a2964b2d7eb7.png#averageHue=%23e5c592&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=278&amp;id=ub986b869&amp;originHeight=278&amp;originWidth=600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21339&amp;status=done&amp;style=shadow&amp;taskId=u45bed6ca-c0cd-41d6-aea2-4b396844a19&amp;title=&amp;width=600" alt="image.png"></p><p>注意：/x<strong>z/ 实际上并没有使用通配符 </strong>，本质上还是使用的 <em>，因为通配符 <em>* 在使用的时候，左右两边都不能有任何字符，必须是 /。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/**/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>启动服务器发现报错了：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710410631877-81bfcc14-3ead-4f2c-99cf-69e0e39c9b3e.png#averageHue=%23fcfbfa&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=176&amp;id=u4e591839&amp;originHeight=176&amp;originWidth=963&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29038&amp;status=done&amp;style=shadow&amp;taskId=u56772db8-8c87-4a36-80c7-6b3ff2a47cf&amp;title=&amp;width=963" alt="image.png"><br>以上写法在Spring5的时候是支持的，但是在Spring6中进行了严格的规定，</em></em> 通配符只能出现在路径的末尾，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testValueAnt/**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试结果：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710410734275-31609763-9ca9-46ec-b8d4-539612055ffe.png#averageHue=%23ebeae8&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=176&amp;id=u013d4106&amp;originHeight=176&amp;originWidth=792&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23052&amp;status=done&amp;style=shadow&amp;taskId=u78626697-57e7-46e2-b00d-97253913ce6&amp;title=&amp;width=792" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710410746239-dcb5b607-28e9-4996-88b6-4e94b411cc6f.png#averageHue=%23eae9e7&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=168&amp;id=ud86c7b22&amp;originHeight=168&amp;originWidth=796&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23320&amp;status=done&amp;style=shadow&amp;taskId=u45c623ea-dfc9-4f24-bbcf-bf40caf96c4&amp;title=&amp;width=796" alt="image.png"></p><h2 id="value中的占位符（重点）"><a href="#value中的占位符（重点）" class="headerlink" title="value中的占位符（重点）"></a>value中的占位符（重点）</h2><p>到目前为止，我们的请求路径是这样的格式：uri?name1=value1&amp;name2=value2&amp;name3=value3<br>其实除了这种方式，还有另外一种格式的请求路径，格式为：uri/value1/value2/value3，我们将这样的请求路径叫做 RESTful 风格的请求路径。<br>RESTful风格的请求路径在现代的开发中使用较多。</p><p>普通的请求路径：<a href="http://localhost:8080/springmvc/login?username=admin&amp;password=123&amp;age=20">http://localhost:8080/springmvc/login?username=admin&amp;password=123&amp;age=20</a><br>RESTful风格的请求路径：<a href="http://localhost:8080/springmvc/login/admin/123/20">http://localhost:8080/springmvc/login/admin/123/20</a></p><p>如果使用RESTful风格的请求路径，在控制器中应该如何获取请求中的数据呢？可以在value属性中使用占位符，例如：/login/{id}/{username}/{password}</p><p>在 RequestMappingTestController 类中添加一个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testRESTful/&#123;id&#125;/&#123;username&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRESTful</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;id&quot;)</span></span></span><br><span class="line"><span class="params">        <span class="type">int</span> id,</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;username&quot;)</span></span></span><br><span class="line"><span class="params">        String username,</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;age&quot;)</span></span></span><br><span class="line"><span class="params">        <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(id + <span class="string">&quot;,&quot;</span> + username + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testRESTful&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>提供视图页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test RESTful<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试value属性使用占位符<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在 index.html 页面中添加超链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping注解的value属性支持占位符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRESTful/1/zhangsan/20&#125;&quot;</span>&gt;</span>测试value属性使用占位符<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>启动服务器测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710414703219-b27d6ea5-cbee-4e42-a11d-cb743563507e.png#averageHue=%23fbfafa&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=296&amp;id=u0bd8dc6d&amp;originHeight=296&amp;originWidth=462&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17171&amp;status=done&amp;style=shadow&amp;taskId=u3727469b-f711-42f3-8eee-a36f4680f07&amp;title=&amp;width=462" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710414717194-86932dc5-5c6c-46b5-acb0-ab04778051ad.png#averageHue=%23f0eeed&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=166&amp;id=uee30dc98&amp;originHeight=166&amp;originWidth=569&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15507&amp;status=done&amp;style=shadow&amp;taskId=u7098ad24-11d7-4490-9539-0d4f1546577&amp;title=&amp;width=569" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710414728167-7b3f3348-feb3-4b62-89c4-047c30e6f3ee.png#averageHue=%23f8f5f2&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=161&amp;id=ud5db4289&amp;originHeight=161&amp;originWidth=481&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21589&amp;status=done&amp;style=shadow&amp;taskId=ub0aeabca-e5be-4a8c-967c-f2097635448&amp;title=&amp;width=481" alt="image.png"></p><h1 id="RequestMapping注解的method属性"><a href="#RequestMapping注解的method属性" class="headerlink" title="RequestMapping注解的method属性"></a>RequestMapping注解的method属性</h1><h2 id="method属性的作用"><a href="#method属性的作用" class="headerlink" title="method属性的作用"></a>method属性的作用</h2><p>在Servlet当中，如果后端要求前端必须发送一个post请求，后端可以通过重写doPost方法来实现。后端要求前端必须发送一个get请求，后端可以通过重写doGet方法来实现。当重写的方法是doPost时，前端就必须发送post请求，当重写doGet方法时，前端就必须发送get请求。如果前端发送请求的方式和后端的处理方式不一致时，会出现405错误。</p><p>HTTP状态码405，这种机制的作用是：限制客户端的请求方式，以保证服务器中数据的安全。</p><p>假设后端程序要处理的请求是一个登录请求，为了保证登录时的用户名和密码不被显示到浏览器的地址栏上，后端程序有义务要求前端必须发送一个post请求，如果前端发送get请求，则应该拒绝。</p><p>那么在SpringMVC框架中应该如何实现这种机制呢？可以使用RequestMapping注解的method属性来实现。</p><p>通过RequestMapping源码可以看到，method属性也是一个数组：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710383145104-28befda6-4f03-4cc0-888d-f0c68e802489.png#averageHue=%23fcfaf9&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=140&amp;id=ub2730852&amp;originHeight=140&amp;originWidth=656&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23040&amp;status=done&amp;style=none&amp;taskId=u46d2d6ff-ccc0-4d6d-9660-3d2cc65d92a&amp;title=&amp;width=656" alt="image.png"><br>数组中的每个元素是 RequestMethod，而RequestMethod是一个枚举类型的数据：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710383181561-c7807a8e-1e03-48bd-93ab-044900f7b52c.png#averageHue=%23fefcf8&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=152&amp;id=ufc6e6501&amp;originHeight=152&amp;originWidth=730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13161&amp;status=done&amp;style=none&amp;taskId=u265bb765-09dd-4927-a64f-14dd51af742&amp;title=&amp;width=730" alt="image.png"><br>因此如果要求前端发送POST请求，该注解应该这样用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来，我们来测试一下：<br>在RequestMappingTestController类中添加以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>提供视图页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Method<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Success!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在index.html页面中提供一个登录的form表单，后端要求发送post请求，则form表单的method属性应设置为post：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>启动服务器，测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710383700474-55cf63ab-7f36-4ab7-b5f7-41046000472d.png#averageHue=%23f9f9f8&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=374&amp;id=u86e908b5&amp;originHeight=374&amp;originWidth=399&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17366&amp;status=done&amp;style=shadow&amp;taskId=u2fde9e03-0dbd-4ad7-ad13-5a725498b02&amp;title=&amp;width=399" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710383716323-ad5bf478-30e9-48ed-8238-ebacaf395625.png#averageHue=%23f6f5f4&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=208&amp;id=ud54dba53&amp;originHeight=208&amp;originWidth=414&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13058&amp;status=done&amp;style=shadow&amp;taskId=u1fa2c31f-7e25-4358-b0fc-e62bdb6b5b4&amp;title=&amp;width=414" alt="image.png"></p><p>通过测试，前端发送的请求方式post，后端处理请求的方式也是post，就不会有问题。<br>当然，如果后端要求前端必须发送post请求，而前端发送了get请求，则会出现405错误，将index.html中form表单提交方式修改为get：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>再次测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710383866495-ea6560e6-b458-4385-95cb-c9a9b24b08cd.png#averageHue=%23e4c595&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=323&amp;id=u8c5a2905&amp;originHeight=323&amp;originWidth=614&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25618&amp;status=done&amp;style=shadow&amp;taskId=ubb1d2640-6dbc-4a41-bd71-41b5b162f55&amp;title=&amp;width=614" alt="image.png"></p><p><strong>因此，可以看出，对于RequestMapping注解来说，多一个属性，就相当于多了一个映射的条件，如果value和method属性都有，则表示只有前端发送的请求路径 + 请求方式都满足时才能与控制器上的方法建立映射关系，只要有一个不满足，则无法建立映射关系。例如：@RequestMapping(value=”/login”, method = RequestMethod.POST) 表示当前端发送的请求路径是 /login，并且发送请求的方式是POST的时候才会建立映射关系。如果前端发送的是get请求，或者前端发送的请求路径不是 /login，则都是无法建立映射的。</strong></p><h2 id="衍生Mapping"><a href="#衍生Mapping" class="headerlink" title="衍生Mapping"></a>衍生Mapping</h2><p>对于以上的程序来说，SpringMVC提供了另一个注解，使用这个注解更加的方便，它就是：PostMapping，使用该注解时，不需要指定method属性，因为它默认采用的就是POST处理方式：修改RequestMappingTestController代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当前端发送get请求时，测试一下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710384745231-3f0f3e3d-e151-4ac8-bde2-e48798aadde0.png#averageHue=%23e4c595&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=314&amp;id=ue0d397c5&amp;originHeight=314&amp;originWidth=611&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25589&amp;status=done&amp;style=shadow&amp;taskId=ud541dff9-f9ed-4015-88ad-ba0c552399f&amp;title=&amp;width=611" alt="image.png"><br>当前端发送post请求时，测试一下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710384819897-64de621f-fb7d-495e-98d3-5e7b192c458d.png#averageHue=%23f7f6f6&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=220&amp;id=u2e7e5b8d&amp;originHeight=220&amp;originWidth=465&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13252&amp;status=done&amp;style=shadow&amp;taskId=u738caa0e-fbf9-4b40-b56d-b4f88ea44ec&amp;title=&amp;width=465" alt="image.png"></p><p>在SpringMVC中不仅提供了 <strong>PostMaping</strong>注解，像这样的注解还有四个，包括：</p><ul><li><strong>GetMapping</strong>：要求前端必须发送get请求</li><li><strong>PutMapping</strong>：要求前端必须发送put请求</li><li><strong>DeleteMapping</strong>：要求前端必须发送delete请求</li><li><strong>PatchMapping</strong>：要求前端必须发送patch请求</li></ul><h2 id="web的请求方式"><a href="#web的请求方式" class="headerlink" title="web的请求方式"></a>web的请求方式</h2><p>前端向服务器发送请求的方式包括哪些？共9种，前5种常用，后面作为了解：</p><ul><li><strong>GET：获取资源，只允许读取数据，不影响数据的状态和功能。使用 URL 中传递参数或者在 HTTP 请求的头部使用参数，服务器返回请求的资源。</strong></li><li><strong>POST：向服务器提交资源，可能还会改变数据的状态和功能。通过表单等方式提交请求体，服务器接收请求体后，进行数据处理。</strong></li><li><strong>PUT：更新资源，用于更新指定的资源上所有可编辑内容。通过请求体发送需要被更新的全部内容，服务器接收数据后，将被更新的资源进行替换或修改。</strong></li><li><strong>DELETE：删除资源，用于删除指定的资源。将要被删除的资源标识符放在 URL 中或请求体中。</strong></li><li><strong>HEAD：请求服务器返回资源的头部，与 GET 命令类似，但是所有返回的信息都是头部信息，不能包含数据体。主要用于资源检测和缓存控制。</strong></li><li>PATCH：部分更改请求。当被请求的资源是可被更改的资源时，请求服务器对该资源进行部分更新，即每次更新一部分。</li><li>OPTIONS：请求获得服务器支持的请求方法类型，以及支持的请求头标志。“OPTIONS *”则返回支持全部方法类型的服务器标志。</li><li>TRACE：服务器响应输出客户端的 HTTP 请求，主要用于调试和测试。</li><li>CONNECT：建立网络连接，通常用于加密 SSL/TLS 连接。</li></ul><p>注意：</p><ol><li>使用超链接以及原生的form表单只能提交get和post请求，put、delete、head请求可以使用发送ajax请求的方式来实现。</li><li>使用超链接发送的是get请求</li><li>使用form表单，如果没有设置method，发送get请求</li><li>使用form表单，设置method=”get”，发送get请求</li><li>使用form表单，设置method=”post”，发送post请求</li><li><strong>使用form表单，设置method=”put/delete/head”，发送get请求。（针对这种情况，可以测试一下）</strong></li></ol><p>将index.html中登录表单的提交方式method设置为put：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>修改RequestMappingTestController类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="comment">//@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试结果：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710387909246-423bd4a6-9e73-40ca-ab7e-fac29f98f61f.png#averageHue=%23e4c595&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=341&amp;id=u5026a61a&amp;originHeight=341&amp;originWidth=627&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26425&amp;status=done&amp;style=shadow&amp;taskId=u5f6746fb-8fe8-44be-bd0e-d3030ea3cc0&amp;title=&amp;width=627" alt="image.png"><br>通过测试得知，即使form中method设置为put方式，但仍然采用get方式发送请求。<br>再次修改RequestMappingTestController：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="comment">//@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再次测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710388055974-40f19d04-9b29-459e-9821-f330066e1e2c.png#averageHue=%23d5b587&amp;clientId=u4c6f25a9-3fa7-4&amp;from=paste&amp;height=211&amp;id=ua8a0b6a6&amp;originHeight=211&amp;originWidth=589&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14700&amp;status=done&amp;style=shadow&amp;taskId=u42564f22-655c-48d8-a0d6-68ad1e0ddca&amp;title=&amp;width=589" alt="image.png"></p><h2 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h2><p>在之前发布的JavaWEB视频中对HTTP请求协议的GET和POST进行了详细讲解，这里就不再赘述，大致回顾一下。<br>HTTP请求协议之GET请求：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /springmvc/login?username=lucy&amp;userpwd=1111 HTTP/1.1                           请求行</span><br><span class="line">Host: localhost:8080                                                                    请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/springmvc/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                        空白行</span><br><span class="line">                                                                                        请求体</span><br></pre></td></tr></table></figure><br>HTTP请求协议之POST请求：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /springmvc/login HTTP/1.1                                                  请求行</span><br><span class="line">Host: localhost:8080                                                                  请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 25</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/springmvc/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                      空白行</span><br><span class="line">username=lisi&amp;userpwd=123                                                             请求体</span><br></pre></td></tr></table></figure></p><h3 id="区别是什么"><a href="#区别是什么" class="headerlink" title="区别是什么"></a>区别是什么</h3><ol><li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。</li></ol><p><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111">http://localhost:8080/springmvc/login?username=zhangsan&amp;userpwd=1111</a></p><ol><li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。</li><li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。get请求无法发送大数据量。</li><li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。post请求可以发送大数据量，理论上没有长度限制。</li><li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li><li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li><li>get请求是安全的。因为在正确使用get请求的前提下，get请求只是为了从服务器上获取数据，不会对服务器数据进行修改。</li><li>post请求是危险的。因为post请求是修改服务器端的资源。</li><li>get请求支持缓存。 也就是说当第二次发送get请求时，会走浏览器上次的缓存结果，不再真正的请求服务器。（有时需要避免，怎么避免：在get请求路径后添加时间戳）</li><li>post请求不支持缓存。每一次发送post请求都会真正的走服务器。</li></ol><h3 id="怎么选择"><a href="#怎么选择" class="headerlink" title="怎么选择"></a>怎么选择</h3><ol><li>如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</li><li>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存/修改等。</li><li>如果表单中有敏感信息，建议使用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</li><li>做文件上传，一定是post请求。要传的数据不是普通文本。</li><li>其他情况大部分都是使用get请求。</li></ol><h1 id="RequestMapping注解的params属性"><a href="#RequestMapping注解的params属性" class="headerlink" title="RequestMapping注解的params属性"></a>RequestMapping注解的params属性</h1><h2 id="params属性的理解"><a href="#params属性的理解" class="headerlink" title="params属性的理解"></a>params属性的理解</h2><p>params属性用来设置通过请求参数来映射请求。<br>对于RequestMapping注解来说：</p><ul><li>value属性是一个数组，只要满足数组中的任意一个路径，就能映射成功</li><li>method属性也是一个数组，只要满足数组中任意一个请求方式，就能映射成功。</li><li><strong>params属性也是一个数组，不过要求请求参数必须和params数组中要求的所有参数完全一致后，才能映射成功。</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710398311030-55ee91e0-b4d0-4b43-9d65-36a552eb6d3a.png#averageHue=%23fcf6f3&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=162&amp;id=u18907e9f&amp;originHeight=162&amp;originWidth=570&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20198&amp;status=done&amp;style=shadow&amp;taskId=u8ad51516-6751-4c99-bbc5-6709f340f9f&amp;title=&amp;width=570" alt="image.png"></p><h2 id="params属性的4种用法"><a href="#params属性的4种用法" class="headerlink" title="params属性的4种用法"></a>params属性的4种用法</h2><p>@RequestMapping(value=”/login”, params={<strong>“username”</strong>, “password”}) 表示：请求参数中必须包含 username 和 password，才能与当前标注的方法进行映射。<br>@RequestMapping(value=”/login”, params={<strong>“!username”</strong>, “password”}) 表示：请求参数中不能包含username参数，但必须包含password参数，才能与当前标注的方法进行映射。<br>@RequestMapping(value=”/login”, params={<strong>“username=admin”</strong>, “password”}) 表示：请求参数中必须包含username参数，并且参数的值必须是admin，另外也必须包含password参数，才能与当前标注的方法进行映射。<br>@RequestMapping(value=”/login”, params={<strong>“username!=admin”</strong>, “password”}) 表示：请求参数中必须包含username参数，但参数的值不能是admin，另外也必须包含password参数，才能与当前标注的方法进行映射。</p><p>注意：如果前端提交的参数，和后端要求的请求参数不一致，则出现400错误！！！<br><strong>HTTP状态码400的原因：请求参数格式不正确而导致的。</strong></p><h2 id="测试params属性"><a href="#测试params属性" class="headerlink" title="测试params属性"></a>测试params属性</h2><p>在 RequestMappingTestController 类中添加如下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testParams&quot;, params = &#123;&quot;username&quot;, &quot;password&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testParams&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>提供视图页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>testParams<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的Params属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在index.html文件中添加超链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的params属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(username=&#x27;admin&#x27;,password=&#x27;123&#x27;)&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>当然，你也可以这样写：这样写IDEA会报错，但不影响使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams?username=admin&amp;password=123&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><br>启动服务器，测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710400506148-f404474f-771b-4fb7-97a8-5a322012fb33.png#averageHue=%23f9f9f8&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=362&amp;id=u8efb554c&amp;originHeight=362&amp;originWidth=396&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17562&amp;status=done&amp;style=shadow&amp;taskId=uad6548f2-e415-4643-b792-f5c5e46bb50&amp;title=&amp;width=396" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710400526780-f4691915-7952-4d91-bb5b-704cf40ab6fd.png#averageHue=%23eceae9&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=161&amp;id=u446cb135&amp;originHeight=161&amp;originWidth=685&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19801&amp;status=done&amp;style=shadow&amp;taskId=u1a28d260-92bc-4ea6-a33a-4bd2c077fc4&amp;title=&amp;width=685" alt="image.png"></p><p>假如发送请求时，没有传递username参数会怎样？<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(password=&#x27;123&#x27;)&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><br>启动服务器，测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710400622164-d051b747-dbc7-4044-bbfb-2d3e40602b65.png#averageHue=%23fafaf9&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=382&amp;id=u0718a0ff&amp;originHeight=382&amp;originWidth=439&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19312&amp;status=done&amp;style=shadow&amp;taskId=u8e31fe95-713c-4bf7-986f-9924b900b21&amp;title=&amp;width=439" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710400640376-f181e4a5-79a3-4a55-a1d9-1d55582102e0.png#averageHue=%23e6c592&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=295&amp;id=u807d8a54&amp;originHeight=295&amp;originWidth=846&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25331&amp;status=done&amp;style=shadow&amp;taskId=u72d9c7f6-837e-4be7-a93d-0930dc7e6d1&amp;title=&amp;width=846" alt="image.png"><br>提示无效的请求参数，服务器无法或不会处理当前请求。<br>params属性剩下的三种情况，自行测试！！！！</p><h1 id="RequestMapping注解的headers属性"><a href="#RequestMapping注解的headers属性" class="headerlink" title="RequestMapping注解的headers属性"></a>RequestMapping注解的headers属性</h1><h2 id="认识headers属性"><a href="#认识headers属性" class="headerlink" title="认识headers属性"></a>认识headers属性</h2><p>headers和params原理相同，用法也相同。<br>当前端提交的请求头信息和后端要求的请求头信息一致时，才能映射成功。<br>请求头信息怎么查看？在chrome浏览器中，F12打开控制台，找到Network，可以查看具体的请求协议和响应协议。在请求协议中可以看到请求头信息，例如：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710402265257-e2b13b8d-52e7-4088-842a-4246be3e866a.png#averageHue=%23fcfbfa&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=366&amp;id=u0b591958&amp;originHeight=366&amp;originWidth=987&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32052&amp;status=done&amp;style=shadow&amp;taskId=ue61420fa-9ede-48ed-a4cf-230b74daaa8&amp;title=&amp;width=987" alt="image.png"><br>请求头信息和请求参数信息一样，都是键值对形式，例如上图中：</p><ul><li>Referer: <a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a>     键是Referer，值是<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a></li><li>Host: localhost:8080     键是Host，值是localhost:8080</li></ul><h2 id="headers属性的4种用法"><a href="#headers属性的4种用法" class="headerlink" title="headers属性的4种用法"></a>headers属性的4种用法</h2><p>@RequestMapping(value=”/login”, headers={<strong>“Referer”</strong>, “Host”}) 表示：请求头信息中必须包含Referer和Host，才能与当前标注的方法进行映射。<br>@RequestMapping(value=”/login”, headers={<strong>“Referer”</strong>, “!Host”}) 表示：请求头信息中必须包含Referer，但不包含Host，才能与当前标注的方法进行映射。<br>@RequestMapping(value=”/login”, headers={<strong>“Referer=<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a>“</strong>, “Host”}) 表示：请求头信息中必须包含Referer和Host，并且Referer的值必须是<a href="http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。">http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。</a><br>@RequestMapping(value=”/login”, headers={<strong>“Referer!=<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a>“</strong>, “Host”}) 表示：请求头信息中必须包含Referer和Host，并且Referer的值不是<a href="http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。">http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。</a></p><p>注意：如果前端提交的请求头信息，和后端要求的请求头信息不一致，则出现404错误！！！</p><h2 id="测试headers属性"><a href="#测试headers属性" class="headerlink" title="测试headers属性"></a>测试headers属性</h2><p>在 RequestMappingTestController 类中添加以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testHeaders&quot;, headers = &#123;&quot;Referer=http://localhost:8080/springmvc/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>提供视图页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Headers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的headers属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在index.html页面中添加超链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的headers属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testHeaders&#125;&quot;</span>&gt;</span>测试headers属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><br>启动服务器，测试结果：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710403104850-63f4c9fb-28ac-483a-b4c4-cdcea6b49e97.png#averageHue=%23fbfafa&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=409&amp;id=ua3cc6168&amp;originHeight=409&amp;originWidth=457&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21151&amp;status=done&amp;style=shadow&amp;taskId=u3f738c6d-a1aa-4db7-a748-bc6b4bd9c3f&amp;title=&amp;width=457" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710403163821-dd5ae672-3b0a-4ae3-b978-48c8bef4f63a.png#averageHue=%23f0efee&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=201&amp;id=u82c3b349&amp;originHeight=201&amp;originWidth=687&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18669&amp;status=done&amp;style=shadow&amp;taskId=u13270e6f-f713-458a-bbff-4d288fb22f1&amp;title=&amp;width=687" alt="image.png"><br>将后端控制器中的headers属性值进行修改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testHeaders&quot;, headers = &#123;&quot;Referer=http://localhost:8888/springmvc/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再次测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710403270750-77c19967-a2a8-423d-9fea-c9632e48cf8c.png#averageHue=%23e6c692&amp;clientId=u9e0c3730-20d1-4&amp;from=paste&amp;height=279&amp;id=u63c4ff7f&amp;originHeight=279&amp;originWidth=554&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20560&amp;status=done&amp;style=shadow&amp;taskId=ue2bdd8ab-8480-4467-a9d4-dd814913f2e&amp;title=&amp;width=554" alt="image.png"><br>其他情况自行测试！！！！</p>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始springMVC</title>
      <link href="/post/d7e4307b.html"/>
      <url>/post/d7e4307b.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h1><p>MVC架构模式相关课程，在老杜的JavaWeb课程中已经详细的讲解了，如果没有学过的，可以看这个视频：<a href="https://www.bilibili.com/video/BV1Z3411C7NZ/?share_source=copy_web&amp;vd_source=ec35128d1000684f9b28e503d6278a41">https://www.bilibili.com/video/BV1Z3411C7NZ</a><br>MVC是一种软件架构模式（是一种软件架构设计思想，不止Java开发中用到，其它语言也需要用到），它将应用分为三块：</p><ul><li>M：Model（模型）</li><li>V：View（视图）</li><li>C：Controller（控制器）</li></ul><p>应用为什么要被分为三块，优点是什么？</p><ul><li>低耦合，扩展能力增强</li><li>代码复用性增强</li><li>代码可维护性增强</li><li>高内聚，让程序员更加专注业务的开发</li></ul><p>MVC将应用分为三块，每一块各司其职，都有自己专注的事情要做，他们属于分工协作，互相配合：</p><ul><li>Model：负责业务处理及数据的收集。</li><li>View：负责数据的展示</li><li>Controller：负责调度。它是一个调度中心，它来决定什么时候调用Model来处理业务，什么时候调用View视图来展示数据。</li></ul><p>MVC架构模式如下所示：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710142469881-5dee11e1-80e8-4cbc-8f0c-726d4e42bbfa.png#averageHue=%23fcfbfb&amp;clientId=uce1673f1-7a5d-4&amp;from=paste&amp;height=490&amp;id=u4dd05c22&amp;originHeight=490&amp;originWidth=1378&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=59855&amp;status=done&amp;style=shadow&amp;taskId=ua013f031-1935-4a3d-8005-8a873b6c68a&amp;title=&amp;width=1378" alt="image.png"><br>MVC架构模式的描述：前端浏览器发送请求给web服务器，web服务器中的Controller接收到用户的请求，Controller负责将前端提交的数据进行封装，然后Controller调用Model来处理业务，当Model处理完业务后会返回处理之后的数据给Controller，Controller再调用View来完成数据的展示，最终将结果响应给浏览器，浏览器进行渲染展示页面。</p><p>面试题：什么是三层模型，并说一说MVC架构模式与三层模型的区别？<br>三层模型：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1711327157487-31faac36-0200-4dd9-afba-65842f7b7e30.png#averageHue=%23e9e9e8&amp;clientId=u0db277a2-7f2a-4&amp;from=paste&amp;height=429&amp;id=u5b1e0bf2&amp;originHeight=740&amp;originWidth=283&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10649&amp;status=done&amp;style=shadow&amp;taskId=u0f2f5b57-991f-4ab1-aa3b-8614d0612aa&amp;title=&amp;width=164" alt="image.png">                            <img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1711327251994-1048ab41-5ecb-4f5d-b3ff-9bf9fd6feb0b.png#averageHue=%23f7f7f7&amp;clientId=u0db277a2-7f2a-4&amp;from=paste&amp;height=426&amp;id=ue3aac816&amp;originHeight=792&amp;originWidth=747&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17781&amp;status=done&amp;style=shadow&amp;taskId=u771a4899-3c30-43cd-afee-3d7c990eccb&amp;title=&amp;width=402" alt="image.png"></p><p>MVC 和三层模型都采用了分层结构来设计应用程序，都是降低耦合度，提高扩展力，提高组件复用性。区别在于：他们的关注点不同，三层模型更加关注业务逻辑组件的划分。<br>MVC架构模式关注的是整个应用程序的层次关系和分离思想。现代的开发方式大部分都是MVC架构模式结合三层模型一起用。</p><h1 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h1><h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><p>SpringMVC是一个实现了MVC架构模式的Web框架，底层基于Servlet实现。<br>SpringMVC已经将MVC架构模式实现了，因此只要我们是基于SpringMVC框架写代码，编写的程序就是符合MVC架构模式的。（<strong>MVC的架子搭好了，我们只需要添添补补</strong>）<br>Spring框架中有一个子项目叫做Spring Web，Spring Web子项目当中包含很多模块，例如：</p><ul><li>Spring MVC</li><li>Spring WebFlux</li><li>Spring Web Services</li><li>Spring Web Flow</li><li>Spring WebSocket</li><li>Spring Web Services Client</li></ul><p>可见 SpringMVC是Spring Web子项目当中的一个模块。因此也可以说SpringMVC是Spring框架的一部分。<br>所以学习SpringMVC框架之前要先学习Spring框架中的IoC和AOP等内容。<br>另外，使用SpringMVC框架的时候同样也可以使用IoC和AOP。<br>以下就是Spring官方给出的Spring架构图，其中Web中的servlet指的就是Spring MVC：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710215881989-618986f1-11c4-459a-8eaa-b58c4ee28d19.png#averageHue=%23404136&amp;clientId=u4dcade31-9013-4&amp;from=paste&amp;height=475&amp;id=u6664721a&amp;originHeight=475&amp;originWidth=647&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17253&amp;status=done&amp;style=shadow&amp;taskId=u159efa0f-eecd-4b86-8737-63a6635acf0&amp;title=&amp;width=647" alt="163550G63-0.png"></p><h2 id="SpringMVC帮我们做了什么"><a href="#SpringMVC帮我们做了什么" class="headerlink" title="SpringMVC帮我们做了什么"></a>SpringMVC帮我们做了什么</h2><p>SpringMVC框架帮我们做了什么，与纯粹的Servlet开发有什么区别？</p><ol><li>入口控制：SpringMVC框架通过DispatcherServlet作为入口控制器，负责接收请求和分发请求。而在Servlet开发中，需要自己编写Servlet程序，并在web.xml中进行配置，才能接受和处理请求。 </li><li>在SpringMVC中，表单提交时可以自动将表单数据绑定到相应的JavaBean对象中，只需要在控制器方法的参数列表中声明该JavaBean对象即可，无需手动获取和赋值表单数据。而在纯粹的Servlet开发中，这些都是需要自己手动完成的。</li><li>IoC容器：SpringMVC框架通过IoC容器管理对象，只需要在配置文件中进行相应的配置即可获取实例对象，而在Servlet开发中需要手动创建对象实例。 </li><li>统一处理请求：SpringMVC框架提供了拦截器、异常处理器等统一处理请求的机制，并且可以灵活地配置这些处理器。而在Servlet开发中，需要自行编写过滤器、异常处理器等，增加了代码的复杂度和开发难度。 </li><li>视图解析：SpringMVC框架提供了多种视图模板，如JSP、Freemarker、Velocity等，并且支持国际化、主题等特性。而在Servlet开发中需要手动处理视图层，增加了代码的复杂度。 </li></ol><p>总之，与Servlet开发相比，SpringMVC框架可以帮我们节省很多时间和精力，减少代码的复杂度，更加专注于业务开发。同时，也提供了更多的功能和扩展性，可以更好地满足企业级应用的开发需求。</p><h2 id="SpringMVC框架的特点"><a href="#SpringMVC框架的特点" class="headerlink" title="SpringMVC框架的特点"></a>SpringMVC框架的特点</h2><ol><li>轻量级：相对于其他Web框架，Spring MVC框架比较小巧轻便。（只有几个几百KB左右的Jar包文件） </li><li>模块化：请求处理过程被分成多个模块，以模块化的方式进行处理。 <ol><li>控制器模块：Controller</li><li>业务逻辑模块：Model</li><li>视图模块：View</li></ol></li><li>依赖注入：Spring MVC框架利用Spring框架的依赖注入功能实现对象的管理，实现松散耦合。 </li><li>易于扩展：提供了很多口子，允许开发者根据需要插入自己的代码，以扩展实现应用程序的特殊需求。 <ol><li>Spring MVC框架允许开发人员通过自定义模块和组件来扩展和增强框架的功能。</li><li>Spring MVC框架与其他Spring框架及第三方框架集成得非常紧密，这使得开发人员可以非常方便地集成其他框架，以获得更好的功能。</li></ol></li><li>易于测试：支持单元测试框架，提高代码质量和可维护性。 （对SpringMVC中的Controller测试时，不需要依靠Web服务器。）</li><li>自动化配置：提供自动化配置，减少配置细节。 <ol><li>Spring MVC框架基于约定大于配置的原则，对常用的配置约定进行自动化配置。</li></ol></li><li>灵活性：Spring MVC框架支持多种视图技术，如JSP、FreeMarker、Thymeleaf、FreeMarker等，针对不同的视图配置不同的视图解析器即可。 </li></ol><h1 id="本套教程相关版本"><a href="#本套教程相关版本" class="headerlink" title="本套教程相关版本"></a>本套教程相关版本</h1><ul><li>JDK版本：Java21</li><li>Maven版本：3.9.6</li><li>Tomcat版本：10</li><li>Spring版本：6.1.4</li><li>SpringMVC版本：6.1.4</li><li>IDEA版本：2023.3</li><li>Thymeleaf版本：3.1.2</li></ul><h1 id="第一个SpringMVC程序"><a href="#第一个SpringMVC程序" class="headerlink" title="第一个SpringMVC程序"></a>第一个SpringMVC程序</h1><h2 id="创建Maven模块"><a href="#创建Maven模块" class="headerlink" title="创建Maven模块"></a>创建Maven模块</h2><p>第一步：创建Empty Project，起名：springmvc。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710230195763-9f5da726-de76-4ba3-9297-c912390a4df3.png#averageHue=%232b2e32&amp;clientId=u4dcade31-9013-4&amp;from=paste&amp;height=691&amp;id=u6e826b07&amp;originHeight=691&amp;originWidth=783&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53646&amp;status=done&amp;style=shadow&amp;taskId=uf253c6e8-a4c3-457f-90b8-f12f0689297&amp;title=&amp;width=783" alt="image.png"><br>第二步：设置springmvc工程的JDK版本：Java21。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710230237463-c2927a70-4e12-4ca5-9b5c-a554eb2524e2.png#averageHue=%232c2f33&amp;clientId=u4dcade31-9013-4&amp;from=paste&amp;height=450&amp;id=u2df3ec3b&amp;originHeight=450&amp;originWidth=1025&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49913&amp;status=done&amp;style=shadow&amp;taskId=ube238351-cd5b-4e61-859e-5d65afdb2b5&amp;title=&amp;width=1025" alt="image.png"><br>第三步：设置maven。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710230325830-67db9b0f-5f01-4804-86a4-5d7c0e72026b.png#averageHue=%232d3034&amp;clientId=u4dcade31-9013-4&amp;from=paste&amp;height=726&amp;id=u6eff3be0&amp;originHeight=726&amp;originWidth=982&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=107845&amp;status=done&amp;style=shadow&amp;taskId=uf51f6d8e-1dda-4a90-b09e-2a32042c0e8&amp;title=&amp;width=982" alt="image.png"><br>第四步：创建Maven模块<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710230477117-f9659e1e-196e-4b8b-aa00-2a2a4b9e1a9b.png#averageHue=%232f343c&amp;clientId=u4dcade31-9013-4&amp;from=paste&amp;height=170&amp;id=ue8072ae5&amp;originHeight=170&amp;originWidth=354&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13198&amp;status=done&amp;style=shadow&amp;taskId=u654baeb7-3032-4edc-a3c3-c20a8f6e13e&amp;title=&amp;width=354" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710234129822-b45b7ab8-0275-4828-b0f1-04bacdd4ee33.png#averageHue=%232c2e32&amp;clientId=u2f9b3597-10b9-4&amp;from=paste&amp;height=819&amp;id=ufe00ce61&amp;originHeight=819&amp;originWidth=918&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=79340&amp;status=done&amp;style=shadow&amp;taskId=ue99e2081-ff4d-432a-b9fc-b7d344c3356&amp;title=&amp;width=918" alt="image.png"><br>第五步：将pom.xml文件中的打包方式修改为war<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode.springmvc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包方式设置为war方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><br>第六步：添加以下依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志框架Logback依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring6和Thymeleaf整合依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="添加web支持"><a href="#添加web支持" class="headerlink" title="添加web支持"></a>添加web支持</h2><p>第一步：在main目录下创建一个webapp目录<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710236651417-5d2d8216-0848-41b8-9dcd-82daf9928e60.png#averageHue=%232d3138&amp;clientId=u28b24a89-f425-4&amp;from=paste&amp;height=331&amp;id=u9088a24c&amp;originHeight=331&amp;originWidth=347&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23354&amp;status=done&amp;style=shadow&amp;taskId=u22c28912-f26d-4b02-925f-a389b1d51d8&amp;title=&amp;width=347" alt="image.png"><br>第二步：添加web.xml配置文件<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710236821253-9144e1b5-8e6a-441a-8aa7-8464a2f30bf4.png#averageHue=%232b2e31&amp;clientId=u28b24a89-f425-4&amp;from=paste&amp;height=851&amp;id=u6851adfa&amp;originHeight=851&amp;originWidth=1237&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73161&amp;status=done&amp;style=shadow&amp;taskId=u80b56088-b844-4339-82e2-ebfee7927b6&amp;title=&amp;width=1237" alt="image.png"><br>注意 web.xml 文件的位置：E:\Spring MVC\code\springmvc\springmvc-001*<em>src\main\webapp\WEB-INF\web.xml*</em><br>注意版本选择：6.0<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710236908015-b84441b8-72e4-41d4-bf50-aea212651f99.png#averageHue=%232c2f34&amp;clientId=u28b24a89-f425-4&amp;from=paste&amp;height=326&amp;id=u6a9dd62f&amp;originHeight=326&amp;originWidth=955&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32569&amp;status=done&amp;style=shadow&amp;taskId=ub18a6482-e640-4074-a4a2-d48e08aa690&amp;title=&amp;width=955" alt="image.png"><br>添加web支持后的目录结构：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710236989434-41f9727a-6944-40ee-899c-3aa58fa1904f.png#averageHue=%232e323a&amp;clientId=u28b24a89-f425-4&amp;from=paste&amp;height=267&amp;id=ub49f5f76&amp;originHeight=267&amp;originWidth=232&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14025&amp;status=done&amp;style=shadow&amp;taskId=ud572ee2f-beae-4750-bf36-e33e0ee7891&amp;title=&amp;width=232" alt="image.png"></p><h2 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h2><p>Spring MVC是一个web框架，在javaweb中谁来负责接收请求，处理请求，以及响应呢？当然是Servlet。在SpringMVC框架中已经为我们写好了一个Servlet，它的名字叫做：DispatcherServlet，我们称其为前端控制器。既然是Servlet，那么它就需要在web.xml文件中进行配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;6.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC提供的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /* 表示任何一个请求都交给DispatcherServlet来处理 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- / 表示当请求不是xx.jsp的时候，DispatcherServlet来负责处理本次请求--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jsp本质就是Servlet，因此如果请求是jsp的话，应该走它自己的Servlet，而不应该走DispatcherServlet --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 因此我们的 url-pattern 使用 / --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>DispatcherServlet是SpringMVC框架为我们提供的最核心的类，它是整个SpringMVC框架的前端控制器，负责接收HTTP请求、将请求路由到处理程序、处理响应信息，最终将响应返回给客户端。DispatcherServlet是Web应用程序的主要入口点之一，它的职责包括：</p><ol><li>接收客户端的HTTP请求：DispatcherServlet监听来自Web浏览器的HTTP请求，然后根据请求的URL将请求数据解析为Request对象。 </li><li>处理请求的URL：DispatcherServlet将请求的URL（Uniform Resource Locator）与处理程序进行匹配，确定要调用哪个控制器（Controller）来处理此请求。 </li><li>调用相应的控制器：DispatcherServlet将请求发送给找到的控制器处理，控制器将执行业务逻辑，然后返回一个模型对象（Model）。 </li><li>渲染视图：DispatcherServlet将调用视图引擎，将模型对象呈现为用户可以查看的HTML页面。 </li><li>返回响应给客户端：DispatcherServlet将为用户生成的响应发送回浏览器，响应可以包括表单、JSON、XML、HTML以及其它类型的数据</li></ol><h2 id="编写控制器FirstController"><a href="#编写控制器FirstController" class="headerlink" title="编写控制器FirstController"></a>编写控制器FirstController</h2><p>DispatcherServlet接收到请求之后，会根据请求路径分发到对应的Controller，Controller来负责处理请求的核心业务。在SpringMVC框架中Controller是一个普通的Java类（一个普通的POJO类，不需要继承任何类或实现任何接口），需要注意的是：POJO类要纳入IoC容器来管理，POJO类的生命周期由Spring来管理，因此要使用注解标注：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: FirstController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 11:56</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="配置springmvc-servlet-xml文件"><a href="#配置springmvc-servlet-xml文件" class="headerlink" title="配置springmvc-servlet.xml文件"></a>配置springmvc-servlet.xml文件</h2><p>SpringMVC框架有它自己的配置文件，该配置文件的名字默认为：<servlet-name>-servlet.xml，默认存放的位置是WEB-INF 目录下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.springmvc.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用于视图渲染的过程中，可以设置视图渲染后输出时采用的编码字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果配置多个视图解析器，它来决定优先使用哪个视图解析器，它的值越小优先级越高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当 ThymeleafViewResolver 渲染模板时，会使用该模板引擎来解析、编译和渲染模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用于指定 Thymeleaf 模板引擎使用的模板解析器。模板解析器负责根据模板位置、模板资源名称、文件编码等信息，加载模板并对其进行解析--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件的位置（前缀）--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件后缀（后缀），Thymeleaf文件扩展名不一定是html，也可以是其他，例如txt，大部分都是html--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板类型，例如：HTML,TEXT,JAVASCRIPT,CSS等--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--用于模板文件在读取和解析过程中采用的编码字符集--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在WEB-INF目录下新建springmvc-servlet.xml文件，并且提供以上配置信息。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710309679329-4454ce41-d80a-42dc-abb7-683bd9397856.png#averageHue=%23f0f3f8&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=265&amp;id=ueec9abf4&amp;originHeight=265&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15499&amp;status=done&amp;style=shadow&amp;taskId=u118f717f-100a-4863-83f9-800ca76eab0&amp;title=&amp;width=296" alt="image.png"><br>以上配置主要两项：</p><ul><li>第一项：组件扫描。spring扫描这个包中的类，将这个包中的类实例化并纳入IoC容器的管理。</li><li>第二项：视图解析器。视图解析器（View Resolver）的作用主要是将Controller方法返回的逻辑视图名称解析成实际的视图对象。视图解析器将解析出的视图对象返回给DispatcherServlet，并最终由DispatcherServlet将该视图对象转化为响应结果，呈现给用户。</li></ul><p>注意：如果采用了其它视图，请配置对应的视图解析器，例如：</p><ul><li>JSP的视图解析器：InternalResourceViewResolver</li><li>FreeMarker视图解析器：FreeMarkerViewResolver</li><li>Velocity视图解析器：VelocityViewResolver<h2 id="提供视图"><a href="#提供视图" class="headerlink" title="提供视图"></a>提供视图</h2>在WEB-INF目录下新建templates目录，在templates目录中新建html文件，例如：first.html，并提供以下代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定 th 命名空间，让 Thymeleaf 标准表达式可以被解析和执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th不是固定的，可以指定其它的命名空间，只不过大部分情况下用th--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示程序中出现的 th 开头的后面代码都是 Thymeleaf语法，需要被 Thymeleaf识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first springmvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个Spring MVC程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>对于每一个Thymeleaf文件来说 xmlns:th=”<a href="http://www.thymeleaf.org&quot;">http://www.thymeleaf.org”</a> 是必须要写的，为了方便后续开发，可以将其添加到html模板文件中：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710310831388-377e7bc4-f5b2-4fa3-9410-d90bfdd894b8.png#averageHue=%2381baa0&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=543&amp;id=u0d2806df&amp;originHeight=543&amp;originWidth=1159&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106487&amp;status=done&amp;style=shadow&amp;taskId=u203bebbc-500e-4cac-af4e-a5ffd79afe9&amp;title=&amp;width=1159" alt="image.png"><h2 id="控制器FirstController处理请求返回逻辑视图名称"><a href="#控制器FirstController处理请求返回逻辑视图名称" class="headerlink" title="控制器FirstController处理请求返回逻辑视图名称"></a>控制器FirstController处理请求返回逻辑视图名称</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: FirstController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 11:56</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String 名字随意()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理请求....&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回逻辑视图名称（决定跳转到哪个页面）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第一步：配置Tomcat服务器<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710311594124-3fb7be8b-9029-4b30-990c-78d2233fb404.png#averageHue=%23f3f5f8&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=719&amp;id=ue0c3bfa6&amp;originHeight=719&amp;originWidth=1152&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84996&amp;status=done&amp;style=shadow&amp;taskId=uea40fb78-9d1c-43d0-957d-4f9344ed40c&amp;title=&amp;width=1152" alt="image.png"><br>第二步：部署web模块到Tomcat服务器<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710311627612-75b1508f-10fe-4510-840f-1b856fee1932.png#averageHue=%23f4f5f9&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=722&amp;id=u88b9e5d0&amp;originHeight=722&amp;originWidth=1155&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48659&amp;status=done&amp;style=shadow&amp;taskId=u0aa86c21-f71f-4805-9d99-57a70ef4c90&amp;title=&amp;width=1155" alt="image.png"><br>第三步：启动Tomcat服务器。如果在控制台输出的信息有中文乱码，请修改tomcat服务器配置文件：apache-tomcat-10.1.19\conf\logging.properties<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710319742230-840a1af7-4ba7-4ee2-bc9c-0f1a056b222a.png#averageHue=%23edeae8&amp;clientId=u09801095-675e-4&amp;from=paste&amp;height=795&amp;id=ua5e8396a&amp;originHeight=795&amp;originWidth=1181&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=97129&amp;status=done&amp;style=shadow&amp;taskId=u39e641a0-e822-41a8-af2e-142dcc6b03c&amp;title=&amp;width=1181" alt="image.png"><br>第四步：打开浏览器，在浏览器地址栏上输入地址：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710312173540-4e975a51-c0df-47a3-8bdd-f2fbdb8ad831.png#averageHue=%23f0efee&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=186&amp;id=u8c054553&amp;originHeight=186&amp;originWidth=482&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14690&amp;status=done&amp;style=shadow&amp;taskId=ub2863046-844b-4739-9104-23161cb4703&amp;title=&amp;width=482" alt="image.png"><br>后端控制台输出：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710312475793-dfb94231-5efe-4a72-840f-63d72143d47f.png#averageHue=%23faf5f3&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=60&amp;id=ude4fd229&amp;originHeight=60&amp;originWidth=297&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5273&amp;status=done&amp;style=shadow&amp;taskId=u0ab8cffa-e1db-4cba-b5b3-ab7d1827efe&amp;title=&amp;width=297" alt="image.png"></p><h2 id="执行流程总结"><a href="#执行流程总结" class="headerlink" title="执行流程总结"></a>执行流程总结</h2><ol><li>浏览器发送请求：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a></li><li>SpringMVC的前端控制器DispatcherServlet接收到请求</li><li>DispatcherServlet根据请求路径 /haha 映射到 FirstController#名字随意()，调用该方法</li><li>FirstController#名字随意() 处理请求</li><li>FirstController#名字随意() 返回逻辑视图名称 first 给视图解析器</li><li>视图解析器找到 /WEB-INF/templates/first.html 文件，并进行解析，生成视图解析对象返回给前端控制器DispatcherServlet</li><li>前端控制器DispatcherServlet响应结果到浏览器。</li></ol><h2 id="一个Controller可以编写多个方法"><a href="#一个Controller可以编写多个方法" class="headerlink" title="一个Controller可以编写多个方法"></a>一个Controller可以编写多个方法</h2><p>一个Controller可以提供多个方法，每个方法通常是处理对应的请求，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String 名字随意()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理请求....&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回逻辑视图名称（决定跳转到哪个页面）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/other&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">other</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理其它请求...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;other&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>提供 other.html 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>other<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>other ...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在 first.html 文件中，添加超链接，用超链接发送 /other 请求：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定 th 命名空间，让 Thymeleaf 标准表达式可以被解析和执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th不是固定的，可以指定其它的命名空间，只不过大部分情况下用th--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示程序中出现的 th 开头的后面代码都是 Thymeleaf语法，需要被 Thymeleaf识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first springmvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个Spring MVC程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- th: 表示后面的代码可以编写Thymeleaf语法，可以被Thymeleaf语法解析 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf检测到以 / 开始，表示绝对路径，自动会将webapp的上下文路径加上去 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终的效果是：href=&quot;/springmvc/other&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/other&#125;&quot;</span>&gt;</span>other请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>启动Tomcat，打开浏览器，输入请求路径：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710313350020-eaecbfaf-c1ba-44d1-9422-3371248f69a2.png#averageHue=%23f0efee&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=193&amp;id=u5a81f52c&amp;originHeight=193&amp;originWidth=470&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15658&amp;status=done&amp;style=shadow&amp;taskId=u4443d95d-723e-49d2-a72c-e1e6b8ed38f&amp;title=&amp;width=470" alt="image.png"><br>点击超链接：other请求<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710313367394-acfcdb9e-576c-4cc2-8d08-2858854a947e.png#averageHue=%23f9f9f8&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=160&amp;id=u773a31a3&amp;originHeight=160&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7427&amp;status=done&amp;style=shadow&amp;taskId=uc14056fa-bf74-46b1-812a-87722cb2245&amp;title=&amp;width=416" alt="image.png"></p><h1 id="第二个SpringMVC程序"><a href="#第二个SpringMVC程序" class="headerlink" title="第二个SpringMVC程序"></a>第二个SpringMVC程序</h1><h2 id="创建Maven模块-1"><a href="#创建Maven模块-1" class="headerlink" title="创建Maven模块"></a>创建Maven模块</h2><ol><li>pom.xml文件中添加依赖<ol><li>springmvc依赖</li><li>logback依赖</li><li>servlet依赖（scope为provided）</li><li>thymeleaf与spring6整合依赖</li></ol></li><li>打包方式war</li></ol><h2 id="添加web支持-1"><a href="#添加web支持-1" class="headerlink" title="添加web支持"></a>添加web支持</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710315550290-18c819de-15fb-4653-a242-8ac1c8d1255d.png#averageHue=%23eef1f8&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=198&amp;id=u1bc1a1cd&amp;originHeight=198&amp;originWidth=219&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9851&amp;status=done&amp;style=shadow&amp;taskId=u9ae36ed0-8799-403a-843d-6ea0c0f28a6&amp;title=&amp;width=219" alt="image.png"><br>webapp目录没有小蓝点怎么办？添加web支持<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710315591600-e1e8f89d-9731-40ee-b601-04c8b2923258.png#averageHue=%23b2cec4&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=373&amp;id=u6dc66d24&amp;originHeight=373&amp;originWidth=369&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33616&amp;status=done&amp;style=shadow&amp;taskId=u8345e6f1-5eb2-4184-bb3b-37bceb8ac17&amp;title=&amp;width=369" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710315690201-7d425088-0775-4e64-97a3-e33c09374add.png#averageHue=%23f4f5f9&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=590&amp;id=u16041e99&amp;originHeight=590&amp;originWidth=1359&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44597&amp;status=done&amp;style=shadow&amp;taskId=u685dcb7d-f2e7-4a7b-a636-3807141b073&amp;title=&amp;width=1359" alt="image.png"></p><h2 id="配置web-xml文件-1"><a href="#配置web-xml文件-1" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h2><p>重点：SpringMVC配置文件的名字和路径是可以手动设置的，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动设置springmvc配置文件的路径及名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为了提高用户的第一次访问效率，建议在web服务器启动时初始化前端控制器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>通过<init-param>来设置SpringMVC配置文件的路径和名字。在DispatcherServlet的init方法执行时设置的。</strong><br><strong><load-on-startup>1&lt;/load-on-startup&gt;建议加上，这样可以提高用户第一次访问的效率。表示在web服务器启动时初始化DispatcherServlet。</strong></p><h2 id="编写IndexController"><a href="#编写IndexController" class="headerlink" title="编写IndexController"></a>编写IndexController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: IndexController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 15:47</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示请求路径如果是：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a> ，则进入 /WEB-INF/templates/index.html 页面。<br><strong>这就是项目的首页效果！！！！！</strong></p><h2 id="在resources目录下配置springmvc-xml文件"><a href="#在resources目录下配置springmvc-xml文件" class="headerlink" title="在resources目录下配置springmvc.xml文件"></a>在resources目录下配置springmvc.xml文件</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710316235461-25d719f5-5b8f-4600-922a-8568d9cd63dc.png#averageHue=%23f0f3f8&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=315&amp;id=u6e0a9fe3&amp;originHeight=315&amp;originWidth=366&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21866&amp;status=done&amp;style=shadow&amp;taskId=ubf2c7ec6-0ca1-437f-9ab5-941d3f16c50&amp;title=&amp;width=366" alt="image.png"><br>配置内容和之前一样，一个是视图解析器，一个是组件扫描。</p><h2 id="提供视图-1"><a href="#提供视图-1" class="headerlink" title="提供视图"></a>提供视图</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710316353838-aac1cd57-12e3-47e4-8b73-2ea2a07a0954.png#averageHue=%23eef0f4&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=128&amp;id=u9a159361&amp;originHeight=128&amp;originWidth=289&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7935&amp;status=done&amp;style=shadow&amp;taskId=uaf3f4b6a-fb23-4ec5-8294-00978351f60&amp;title=&amp;width=289" alt="image.png"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>部署到web服务器，启动web服务器，打开浏览器，在地址栏上输入：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710317491301-4104920d-3537-40d1-b950-2ad1f3398a2d.png#averageHue=%23f7f7f6&amp;clientId=u0dd2e7db-835e-4&amp;from=paste&amp;height=170&amp;id=uc8b7b484&amp;originHeight=170&amp;originWidth=421&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8615&amp;status=done&amp;style=shadow&amp;taskId=u9896bf63-92fb-4dd5-9584-0cbffeb8277&amp;title=&amp;width=421" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> springMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法基础格式</title>
      <link href="/post/4176dc8d.html"/>
      <url>/post/4176dc8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-butterfly外挂标签"><a href="#1-butterfly外挂标签" class="headerlink" title="1.butterfly外挂标签"></a>1.butterfly外挂标签</h1><h2 id="1-1行内文本text"><a href="#1-1行内文本text" class="headerlink" title="1.1行内文本text"></a>1.1行内文本text</h2><div class="tabs" id="标签语法"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="标签语法-1">标签语法</button><button type="button" class="tab " data-href="标签语法-2">示例源码</button><button type="button" class="tab " data-href="标签语法-3">渲染展示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="标签语法-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="标签语法-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">2. 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">3. 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">4. 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">5. 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">6. 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="标签语法-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/post/a9d8f19d.html"/>
      <url>/post/a9d8f19d.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="hexo版本查看"><a href="#hexo版本查看" class="headerlink" title="hexo版本查看"></a>hexo版本查看</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo version #查看hexo版本</span><br><span class="line">hexo -v #简写</span><br></pre></td></tr></table></figure><h2 id="hexo的初始化"><a href="#hexo的初始化" class="headerlink" title="hexo的初始化"></a>hexo的初始化</h2><p><code>hexo generate</code> 命令用于生成静态文件，一般可以简写为 <code>hexo g</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init [文件夹名folder] #初始化文件夹folder</span><br><span class="line">hexo init #在当前文件夹初始化</span><br></pre></td></tr></table></figure><h2 id="hexo清除缓存"><a href="#hexo清除缓存" class="headerlink" title="hexo清除缓存"></a>hexo清除缓存</h2><p><code>hexo clean</code> 命令用于清理缓存文件，是一个比较常用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清除部署的緩存清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line">hexo cl #简写</span><br></pre></td></tr></table></figure><h2 id="hexo生成静态页面"><a href="#hexo生成静态页面" class="headerlink" title="hexo生成静态页面"></a>hexo生成静态页面</h2><p><code>hexo generate</code> 命令用于生成静态文件，一般可以简写为 <code>hexo g</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  #生成静态页面 </span><br><span class="line">hexo g #简写 </span><br></pre></td></tr></table></figure><h2 id="hexo启动本地服务器"><a href="#hexo启动本地服务器" class="headerlink" title="hexo启动本地服务器"></a>hexo启动本地服务器</h2><p><code>hexo server</code> 命令用于启动本地服务器，一般可以简写为 <code>hexo s</code></p><ul><li><code>-p</code> 选项，指定服务器端口，默认为 4000</li><li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> hexo server  #本地部署，可预览网站，默认端口为4000，</span><br><span class="line">#浏览器输入localhost:4000即可进 按ctrl+c退出预览(退出后localhost:4000失效)</span><br><span class="line">hexo s  #简写</span><br></pre></td></tr></table></figure><h2 id="hexo部署到GitHub"><a href="#hexo部署到GitHub" class="headerlink" title="hexo部署到GitHub"></a>hexo部署到GitHub</h2><p><code>hexo deploy</code> 命令用于部署网站，一般可以简写为 <code>hexo d</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy  #将网站部署到GitHub</span><br><span class="line">hexo d #简写</span><br><span class="line">hexo cl; hexo g; hexo d  #先清除缓存，在生成页面并部署到GitHub</span><br><span class="line">hexo cl; hexo s  #清空缓存，本地部署进行预览</span><br><span class="line">hexo cl; hexo g; gulp; hexo d #如果安装了gulp压缩插件则是这么执行</span><br></pre></td></tr></table></figure><h2 id="hexo新建文章"><a href="#hexo新建文章" class="headerlink" title="hexo新建文章"></a>hexo新建文章</h2><p><code>hexo new</code> 命令用于新建文章，一般可以简写为 <code>hexo n</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li><code>layout</code> 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li><code>title</code> 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li></ul><h2 id="hexo调式模式"><a href="#hexo调式模式" class="headerlink" title="hexo调式模式"></a>hexo调式模式</h2><p><code>hexo --debug</code> 表示调试模式，用于将消息详细记录到终端和 <code>debug.log</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://hexo.io/zh-cn/docs/commands">hexo官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础第一天</title>
      <link href="/post/d316227c.html"/>
      <url>/post/d316227c.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础-第1天"><a href="#JavaScript-基础-第1天" class="headerlink" title="JavaScript 基础 - 第1天"></a>JavaScript 基础 - 第1天</h1><blockquote><p>了解变量、数据类型、运算符等基础概念，能够实现数据类型的转换，结合四则运算体会如何编程。</p></blockquote><ul><li>体会现实世界中的事物与计算机的关系</li><li>理解什么是数据并知道数据的分类</li><li>理解变量存储数据的“容器”</li><li>掌握常见运算符的使用，了解优先级关系</li><li>知道 JavaScript 数据类型隐式转换的特征</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>掌握 JavaScript 的引入方式，初步认识 JavaScript 的作用</p></blockquote><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p><h4 id="内部方式"><a href="#内部方式" class="headerlink" title="内部方式"></a>内部方式</h4><p>通过 <code>script</code> 标签包裹 JavaScript 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部形式"><a href="#外部形式" class="headerlink" title="外部形式"></a>外部形式</h4><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 script 标签使用 src 属性引入了某 .js 文件，那么 标签的代码会被忽略！！！如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处的代码会被忽略掉！！！！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="number">666</span>);  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释和结束符"><a href="#注释和结束符" class="headerlink" title="注释和结束符"></a>注释和结束符</h3><p>通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：</p><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>使用 <code>//</code> 注释单行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种是单行注释的语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次只能注释一行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复注释</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>使用 <code>/* */</code> 注释多行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 这种的是多行注释的语法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    更常见的多行注释是这种写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    在些可以任意换行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    多少行都可以</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：编辑器中单行注释的快捷键为 <code>ctrl + /</code></strong></p><h3 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h3><p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用回车（enter）替代。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 结束符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line">    alert(1);</span><br><span class="line">    alert(2);</span><br><span class="line">    alert(1)</span><br><span class="line">    alert(2)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p><p>举例说明：如按键盘上的方向键，向上/下键可以滚动页面，按向上/下键这个动作叫作输入，页面发生了滚动了这便叫输出。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>JavaScript 可以接收用户的输入，然后再将输入的结果输出：</p><p><code>alert()</code>、<code>document.wirte()</code></p><p>以数字为例，向 <code>alert()</code> 或 <code>document.write()</code>输入任意数字，他都会以弹窗形式展示（输出）给用户。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 输入输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 输入的任意数字，都会以弹窗形式展示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;要输出的内容&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>理解变量是计算机存储数据的“容器”，掌握变量的声明方式</p></blockquote><p>变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆，通俗的理解变量就是使用【某个符号】来代表【某个具体的数值】（数据）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// x 符号代表了 5 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  x = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// y 符号代表了 6 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  y = <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//举例： 在 JavaScript 中使用变量可以将某个数据（数值）记录下来！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 将用户输入的内容保存在 num 这个变量（容器）中</span></span></span><br><span class="line"><span class="language-javascript">  num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一数字!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过 num 变量（容器）将用户输入的内容输出出来</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(num)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(num)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 变量名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 <code>let</code> 的含义是声明变量的，看到 <code>let</code>  后就可想到这行代码的意思是在声明变量，如 <code>let age;</code> </p><p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量！！！</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 赋值，将 18 这个数据存入了 age 这个“容器”中</span></span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这样 age 的值就成了 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(age)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 也可以声明和赋值同时进行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(str);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>JavaScript 使用专门的关键字 <code>let</code> 和 <code>var</code> 来声明（定义）变量，在使用时需要注意一些细节：</p><p>以下是使用 <code>let</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li>不允许重复声明</li><li>允许同时声明多个变量并赋值</li><li>JavaScript 中内置的一些关键字不能被当做变量名</li></ol><p>以下是使用 <code>var</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li>允许重复声明</li><li>允许同时声明多个变量并赋值</li></ol><p>大部分情况使用 <code>let</code> 和 <code>var</code> 区别不大，但是 <code>let</code> 相较 <code>var</code> 更严谨，因此推荐使用 <code>let</code>，后期会更进一步介绍二者间的区别。</p><h3 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h3><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p><ol><li>只能是字母、数字、下划线、$，且不能能数字开头</li><li>字母区分大小写，如 Age 和 age 是不同的变量</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>尽量保证变量具有一定的语义，见字知义</li></ol><p>注：所谓关键字是指 JavaScript 内部使用的词语，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 变量名命名规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age1 = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> _age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 1age = 18; // 错误，不可以数字开头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Age</span> = <span class="number">24</span> <span class="comment">// 正确，它与小写的 age 是不同的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let let = 18; // 错误，let 是关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> int = <span class="number">123</span> <span class="comment">// 不推荐，int 是保留字</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>概念：使用 const 声明的变量称为“常量”。</p><p>使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let。</p><p>命名规范：和变量一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>计算机世界中的万事成物都是数据。</p></blockquote><p>计算机程序可以处理大量的数据，为了方便数据的管理，将数据分成了不同的类型：</p><p>注：通过 typeof 关键字检测数据类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测 1 是什么类型数据，结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>即我们数学中学习到的数字，可以是整数、小数、正数、负数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> score = <span class="number">100</span> <span class="comment">// 正整数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> price = <span class="number">12.345</span> <span class="comment">// 小数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> temperature = -<span class="number">40</span> <span class="comment">// 负数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> score) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> price) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> temperature) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>通过单引号（ <code>&#39;&#39;</code>） 、双引号（ <code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p><p>注意事项：</p><ol><li>无论单引号或是双引号必须成对使用</li><li>单引号/双引号可以互相嵌套，但是不以自已嵌套自已</li><li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user_name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">// 使用单引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gender = <span class="string">&quot;男&quot;</span> <span class="comment">// 使用双引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 看上去是数字，但是用引号包裹了就成了字符串了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str1 = <span class="string">&#x27;&#x27;</span> <span class="comment">// 这种情况叫空字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> user_name) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> gender) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> str) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 <code>true</code> 和 <code>false</code>，表示肯定的数据用 <code>true</code>，表示否定的数据用 <code>false</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  pink老师帅不帅？回答 是 或 否</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> isCool = <span class="literal">true</span> <span class="comment">// 是的，摔死了！</span></span></span><br><span class="line"><span class="language-javascript">    isCool = <span class="literal">false</span> <span class="comment">// 不，套马杆的汉子！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> isCool) <span class="comment">// 结果为 boolean</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只声明了变量，并末赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tmp;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> tmp) <span class="comment">// 结果为 undefined</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：JavaScript 中变量的值决定了变量的数据类型。</strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><blockquote><p>理解弱类型语言的特征，掌握显式类型转换的方法</p></blockquote><p>在 JavaScript 中数据被分成了不同的类型，如数值、字符串、布尔值、undefined，在实际编程的过程中，不同数据类型之间存在着转换的关系。</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 132</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后 + 将两个字符串拼接到了一起</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后数值 13 减去 数值 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="title function_">prompt</span>(<span class="string">&#x27;请再输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：数据类型的隐式转换是 JavaScript 的特征，后续学习中还会遇到，目前先需要理解什么是隐式转换。</p><p>补充介绍模板字符串的拼接的使用</p><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code>（Not a Number）即不是一个数字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> t = <span class="string">&#x27;12&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> f = <span class="number">8</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显式将字符串 12 转换成数值 12</span></span></span><br><span class="line"><span class="language-javascript">    t = <span class="title class_">Number</span>(t)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测转换后的类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof t);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t + f) <span class="comment">// 结果为 20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并不是所有的值都可以被转成数值类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将 hello 转成数值是不现实的，当无法转换成</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数值时，得到的结果为 NaN （Not a Number）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
