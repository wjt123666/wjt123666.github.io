<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git</title>
      <link href="/post/69c3279c.html"/>
      <url>/post/69c3279c.html</url>
      
        <content type="html"><![CDATA[<h2 id="01-Git-初识"><a href="#01-Git-初识" class="headerlink" title="01.Git 初识"></a>01.Git 初识</h2><ol><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Git">概念</a>：一个免费开源，分布式的代码版本控制系统，帮助开发团队维护代码</p></li><li><p>作用：记录代码内容，切换代码版本，多人开发时高效合并代码内容</p></li><li><p>如何学：</p><p>个人本机使用：Git 基础命令和概念</p><p>多人共享使用：团队开发同一个项目的代码版本管理</p></li></ol><p><img src="images/image-20230529122327389.png" alt="image-20230529122327389"></p><p><a href="https://git-scm.com/">Windows</a><a href="https://git-scm.com/">系统</a>：exe 程序，默认下一步即可</p><p>Mac系统：dmg 程序，默认下一步即可</p><p>检验成功：</p><p>1.打开 bash 终端（git 专用）</p><p>2.命令：git -v（查看版本号）</p><p><img src="images/image-20230529122438740.png" alt="image-20230529122438740"></p><p>配置：用户名和邮箱，应用在每次提交代码版本时表明自己身份</p><p>命令：</p><p>git config —global user.name “itheima”</p><p>git config —global user.email “itheima@itcast.cn”</p><p><img src="images/image-20230529122501504.png" alt="image-20230529122501504"></p><p>1.为何学习 Git ？</p><p>ü 管理代码版本，记录，切换，合并代码</p><p>2.Git 学习：</p><p>ü 现在本机自己使用</p><p>ü 再学习多人共享使用</p><p>3.如何安装使用？</p><p>ü 程序双击安装</p><p>ü 在 VSCode 中使用 bash 终端以及 git 命令</p><h2 id="02-Git-仓库"><a href="#02-Git-仓库" class="headerlink" title="02.Git 仓库"></a>02.Git 仓库</h2><p>Git 仓库（repository）：记录文件状态内容的地方，存储着修改的历史记录</p><p><img src="images/image-20230529122701516.png" alt="image-20230529122701516"></p><p>创建：</p><p>1.把本地文件夹转换成 Git 仓库：命令 git init</p><p>2.从其他服务器上克隆 Git 仓库</p><p><img src="images/image-20230529122712090.png" alt="image-20230529122712090"></p><p>需求：创建一个空白的 Git 仓库</p><p>1.什么是 Git 仓库 ？</p><p>ü 记录文件状态内容和历史记录的地方（.git 文件夹）</p><p>2.如何创建 Git 仓库？</p><p>ü 把本地文件夹转换成 Git 仓库：命令 git init</p><p>ü 从其他服务器上克隆 Git 仓库</p><h2 id="03-Git-的三个区域"><a href="#03-Git-的三个区域" class="headerlink" title="03.Git 的三个区域"></a>03.Git 的三个区域</h2><p>Git 使用时：</p><p>工作区：实际开发时操作的文件夹</p><p>暂存区：保存之前的准备区域（暂存改动过的文件）</p><p>版本库：提交并保存暂存区中的内容，产生一个版本快照</p><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git add 文件名</td><td>暂存指定文件</td></tr><tr><td>git add .</td><td>暂存所有改动的文件</td></tr><tr><td>git commit -m “注释说明”</td><td>提交并保存，产生版本快照</td></tr></tbody></table></div><p>需求：把登录页面新增后，暂存并提交</p><p><img src="images/image-20230529122806613.png" alt="image-20230529122806613"></p><p>1.Git 使用时有哪些区域 ？</p><p>ü 工作区，暂存区，版本库</p><p>2.工作区的内容，最终要如何保存在版本库中？</p><p>ü git add 添加到暂存区</p><p>ü等待时机后 git commit 提交保存到版本库，产生一次版本快照记录</p><h2 id="04-Git-文件状态"><a href="#04-Git-文件状态" class="headerlink" title="04.Git 文件状态"></a>04.Git 文件状态</h2><p>Git 文件 2 种状态：</p><p>ü未跟踪：新文件，从未被 Git 管理过</p><p>ü已跟踪：Git 已经知道和管理的文件</p><div class="table-container"><table><thead><tr><th><strong>文件状态</strong></th><th><strong>概念</strong></th><th><strong>场景</strong></th></tr></thead><tbody><tr><td>未跟踪（U）</td><td>从未被 Git 管理过</td><td>新文件</td></tr><tr><td>新添加（A）</td><td>第一次被 Git 暂存</td><td>之前版本记录无此文件</td></tr><tr><td>未修改（’’）</td><td>三个区域统一</td><td>提交保存后</td></tr><tr><td>已修改（M）</td><td>工作区内容变化</td><td>修改了内容产生</td></tr></tbody></table></div><p>使用：修改文件，暂存，提交保存记录，如此反复</p><p><img src="images/image-20230529123235160.png" alt="image-20230529123235160"></p><p>需求：新增 css 文件，并使用 git status -s 查看文件状态，并最终提交</p><p>第一列是暂存区状态</p><p>第二列是工作区状态</p><p><img src="images/image-20230529123220861.png" alt="image-20230529123220861"></p><p>1.Git 文件状态分为哪 2 种 ？</p><p>ü 未跟踪和已跟踪（新添加，未修改，已修改）</p><p>2.如何查看暂存区和工作区文件状态？</p><p>ü git status -s</p><h2 id="05-Git-暂存区作用"><a href="#05-Git-暂存区作用" class="headerlink" title="05.Git 暂存区作用"></a>05.Git 暂存区作用</h2><p>暂存区：暂时存储，可以临时恢复代码内容，与版本库解耦</p><p>暂存区 -&gt; 覆盖 -&gt; 工作区，命令：git restore 目标文件（注意：完全确认覆盖时使用）</p><p>从暂存区移除文件，命令：git rm —cached 目标文件</p><p><img src="images/image-20230529123430435.png" alt="image-20230529123430435"></p><p>1.如何移除暂存区已暂存的文件？</p><p>ü git rm —cached 目标文件</p><h2 id="06-练习-登录页面"><a href="#06-练习-登录页面" class="headerlink" title="06.练习-登录页面"></a>06.练习-登录页面</h2><p>需求：新增 JS 代码并暂存提交产生新的版本快照</p><p>步骤</p><p>1.新增 js 文件和内容</p><p>2.临时存放在暂存区</p><p>3.提交保存到版本库</p><p><img src="images/image-20230529123902303.png" alt="image-20230529123902303"></p><h2 id="07-Git-切换版本"><a href="#07-Git-切换版本" class="headerlink" title="07.Git-切换版本"></a>07.Git-切换版本</h2><p>概念：把版本库某个版本对应的内容快照，恢复到工作区/暂存区</p><p>查看提交历史：git log —oneline </p><p><img src="images/image-20230529123927488.png" alt="image-20230529123927488"></p><p>回退命令：</p><p>git reset —soft 版本号（其他文件未跟踪）</p><p>git reset —hard 版本号</p><p>git reset —mixed 版本号 （与 git reset 等价）</p><p>注意1：只有记录在版本库的提交记录才能恢复</p><p>注意2：回退后，继续修改-&gt;暂存-&gt;提交操作即可（产生新的提交记录过程）</p><p><img src="images/image-20230529123953391.png" alt="image-20230529123953391"></p><p>1.什么是 Git 回退版本？</p><p>ü 把版本库某个版本对应的内容快照，恢复到工作区/暂存区</p><p>2.强制覆盖暂存区和工作区的命令？</p><p>ü git reset —hard 版本号</p><p>3.如何查看提交历史？</p><p>ü git log —oneline </p><p>ü git reflog —oneline</p><h2 id="08-删除文件"><a href="#08-删除文件" class="headerlink" title="08.删除文件"></a>08.删除文件</h2><p>需求：删除 editor.js 文件，并产生一次版本记录</p><p>步骤：</p><p>1.手动删除工作区文件</p><p>2.暂存变更/手动删除暂存区文件造成变更</p><p>3.提交保存</p><p>总结：</p><p>工作区只要改变，都可以暂存提交产生新记录</p><p><img src="images/image-20230529124024285.png" alt="image-20230529124024285"></p><h2 id="09-忽略文件"><a href="#09-忽略文件" class="headerlink" title="09.忽略文件"></a>09.忽略文件</h2><p>概念：.gitignore 文件可以让 git 彻底忽略跟踪指定文件</p><p>目的：让 git 仓库更小更快，避免重复无意义的文件管理</p><p>例如：</p><p>1.系统或软件自动生成的文件</p><p>2.编译产生的结果文件</p><p>3.运行时生成的日志文件，缓存文件，临时文件等</p><p>4.涉密文件，密码，秘钥等文件</p><p>创建：</p><p>1.项目根目录新建 .gitignore 文件</p><p>2.填入相应配置来忽略指定文件</p><p>注意：如果文件已经被暂存区跟踪过，可以从暂存区移除即可</p><p><img src="images/image-20230529124342264.png" alt="image-20230529124342264"></p><h2 id="10-分支的概念"><a href="#10-分支的概念" class="headerlink" title="10.分支的概念"></a>10.分支的概念</h2><p>概念：本质上是指向提交节点的可变指针，默认名字是 master</p><p>注意：HEAD 指针影响工作区/暂存区的代码状态</p><p><img src="images/image-20230529124358139.png" alt="image-20230529124358139"></p><p><img src="images/image-20230529124411556.png" alt="image-20230529124411556"></p><p>场景：开发新需求 / 修复 Bug，保证主线代码随时可用，多人协同开发提高效率</p><p>例如：</p><p>在现有代码上创建新分支完成内容列表业务</p><p>突然需要紧急修复 Bug - 单独创建分支解决 Bug</p><p><img src="images/image-20230529124440884.png" alt="image-20230529124440884"></p><p>需求：创建内容列表 content 分支，并产生 3 次提交记录</p><p>步骤：</p><ol><li>创建分支命令：git branch 分支名</li></ol><p><img src="images/image-20230529124522942.png" alt="image-20230529124522942"></p><ol><li>切换分支命令：git checkout 分支名</li></ol><p><img src="images/image-20230529124555625.png" alt="image-20230529124555625"></p><ol><li><p>工作区准备代码并暂存提交，重复 3 次</p><p><img src="images/image-20230529124624603.png" alt="image-20230529124624603"></p></li></ol><p>1.什么是 Git 分支？</p><p>ü 指针，指向提交记录</p><p>2.HEAD 指针的作用？</p><p>ü 影响暂存区和工作区的代码</p><p>3.如何创建和切换指针？</p><p>ü git branch 分支名</p><p>ü git checkout 分支名</p><h2 id="11-练习-登录-bug-修复"><a href="#11-练习-登录-bug-修复" class="headerlink" title="11.练习-登录 bug 修复"></a>11.练习-登录 bug 修复</h2><p>需求：新建 login-bug 分支，做 2 次提交记录（对手机号长度，验证码长度做判断）</p><p>步骤：</p><p>1.切回到主分支：git checkout master</p><p>2.创建新分支：git branch login-bug</p><p>3.切换新分支：git checkout login-bug</p><p>4.修改代码，暂存，提交产生版本记录</p><h2 id="12-分支-合并与删除"><a href="#12-分支-合并与删除" class="headerlink" title="12.分支-合并与删除"></a>12.分支-合并与删除</h2><p>需求：把 login-bug 合并回到 master 分支并删除 login-bug 分支</p><p>步骤：</p><p>1.切回到要合入的分支上：git checkout master</p><p>2.合并其他分支过来：git merge login-bug</p><p>3.删除合并后的分支指针：git branch -d login-bug</p><p><img src="images/image-20230529124941866.png" alt="image-20230529124941866"></p><h2 id="13-分支-合并与提交"><a href="#13-分支-合并与提交" class="headerlink" title="13.分支-合并与提交"></a>13.分支-合并与提交</h2><p>合并提交：发生于原分支产生了新的提交记录后，再合并回去时发生，自动使用多个快照记录合并后产生一次新的提交</p><p>步骤：</p><p>1.切回到要合入的分支上：git checkout master</p><p>2.合并其他分支过来：git merge content</p><p>3.删除合并后的分支：git branch -d content</p><p><img src="images/image-20230529125317433.png" alt="image-20230529125317433"></p><p>最后合并回到主分支上时，提交记录流程图：</p><p>注意：提交记录的顺序按照产生的先后顺序排列，而非合并的先后顺序</p><p><img src="images/image-20230529125338535.png" alt="image-20230529125338535"></p><h2 id="14-分支-合并冲突"><a href="#14-分支-合并冲突" class="headerlink" title="14.分支-合并冲突"></a>14.分支-合并冲突</h2><p>需求1：基于 master 新建 publish 分支，完成发布文章业务，然后修改内容页面的 html 文件的 title 标签，并提交一次</p><p>需求2：切换到 master，也在修改内容页面的 html 文件的 title 标签，并提交一次</p><p>冲突：把 publish 分支合并到 master 回来，产生合并冲突</p><p>概念：不同分支中，对同一个文件的同一部分修改，Git 无法干净的合并，产生合并冲突</p><p>解决：</p><p>1.打开 VSCode 找到冲突文件并手动解决</p><p>2.解决后需要提交一次记录</p><p>避免：（多交流）</p><p>1.按页面划分不同分支开发</p><p>2.公共代码在统一文件夹维护</p><p>3.Node等软件版本统一，npm 包统一下载</p><p><img src="images/image-20230529125409357.png" alt="image-20230529125409357"></p><h2 id="15-Git-常用命令"><a href="#15-Git-常用命令" class="headerlink" title="15.Git 常用命令"></a>15.Git 常用命令</h2><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git -v</td><td>查看 git 版本</td><td></td></tr><tr><td>git init</td><td>初始化 git 仓库</td><td></td></tr><tr><td>git add 文件标识</td><td>暂存某个文件</td><td>文件标识以终端为起始的相对路径</td></tr><tr><td>git add .</td><td>暂存所有文件</td><td></td></tr><tr><td>git commit -m ‘说明注释’</td><td>提交产生版本记录</td><td>每次提交，把暂存区内容快照一份</td></tr><tr><td>git status</td><td>查看文件状态 - 详细信息</td><td></td></tr><tr><td>git status -s</td><td>查看文件状态 - 简略信息</td><td>第一列是暂存区状态，第二列是工作区状态</td></tr><tr><td>git ls-files</td><td>查看暂存区文件列表</td><td></td></tr><tr><td>git restore 文件标识</td><td>从暂存区恢复到工作区</td><td>如果文件标识为 . 则恢复所有文件</td></tr><tr><td>git rm —cached 文件标识</td><td>从暂存区移除文件</td><td>不让 git 跟踪文件变化</td></tr><tr><td>git log</td><td>查看提交记录 - 详细信息</td><td></td></tr><tr><td>git log —oneline</td><td>查看提交记录 - 简略信息</td><td>版本号 分支指针 提交时说明注释</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git reflog —oneline</td><td>查看完整历史 - 简略消息</td><td>包括提交，切换，回退等所有记录</td></tr><tr><td>git reset 版本号</td><td>切换版本代码到暂存区和工作区</td><td>—soft 模式保留暂存区和工作区原本内容  —hard 模式不保留暂存区和工作区原本内容  —mixed 模式不保留暂存区，工作区保留（默认）  先覆盖到暂存区，再用暂存区对比覆盖工作区</td></tr><tr><td>git branch 分支名</td><td>创建分支</td><td></td></tr><tr><td>git branch</td><td>查看本地分支</td><td></td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td><td>请确保记录已经合并到别的分支下，再删除分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td><td></td></tr><tr><td>git checkout -b 分支名</td><td>创建并立刻切换分支</td><td></td></tr><tr><td>git merge 分支名</td><td>把分支提交历史记录合并到当前所在分支</td><td></td></tr><tr><td></td><td></td></tr></tbody></table></div><h2 id="16-Git-远程仓库"><a href="#16-Git-远程仓库" class="headerlink" title="16.Git 远程仓库"></a>16.Git 远程仓库</h2><p>概念：托管在因特网或其他网络中的你的项目的版本库</p><p>作用：保存版本库的历史记录，多人协作</p><p>创建：公司自己服务器 / 第三方托管平台（Gitee，GitLab，GitHub…）</p><p><img src="images/image-20230529125501239.png" alt="image-20230529125501239"></p><p>需求：创建远程版本库，并把本地 Git 仓库推送上去保存</p><p>步骤：</p><p>1.注册第三方托管平台网站账号</p><p>2.新建仓库得到远程仓库 Git 地址</p><p>3.本地 Git 仓库添加远程仓库原点地址</p><p>命令：git remote add 远程仓库别名 远程仓库地址</p><p>例如：git remote add origin <a href="https://gitee.com/lidongxu/work.git">https://gitee.com/lidongxu/work.git</a></p><p>4.本地 Git 仓库推送版本记录到远程仓库</p><p>命令：git push -u 远程仓库别名 本地和远程分支名</p><p>例如：git push -u origin master</p><p>完整写法：git push —set-upstream origin master:master</p><p><img src="images/image-20230529125724051.png" alt="image-20230529125724051"></p><p>1.远程版本库的作用？</p><p>ü 保存提交历史记录，多人共享</p><p>2.远程版本库使用步骤？</p><p>ü 创建远程版本库（自己服务器/第三方托管平台）</p><p>ü 本地版本库设置远程地址</p><p>ü 推送本地版本库到远程</p><p>3.推送的命令？</p><p>ü git push -u origin master</p><h2 id="17-Git-远程仓库-克隆"><a href="#17-Git-远程仓库-克隆" class="headerlink" title="17.Git 远程仓库 - 克隆"></a>17.Git 远程仓库 - 克隆</h2><p>克隆：拷贝一个 Git 仓库到本地，进行使用</p><p>命令：git clone 远程仓库地址，例如：git clone <a href="https://gitee.com/lidongxu/work.git">https://gitee.com/lidongxu/work.git</a></p><p>效果：在运行命令所在文件夹，生成 work 项目文件夹（包含版本库，并映射到暂存区和工作区）</p><p>注意1：Git 本地仓库已经建立好和远程仓库的链接</p><p>注意2：仓库公开随意克隆，推送需要身为仓库团队成员</p><p><img src="images/image-20230529125801013.png" alt="image-20230529125801013"></p><h2 id="18-多人协同开发"><a href="#18-多人协同开发" class="headerlink" title="18.多人协同开发"></a>18.多人协同开发</h2><p>需求：小传新代码共享给小智</p><p>步骤：</p><p>1.小传开发代码 -&gt; 工作区 -&gt; 暂存区 -&gt; 提交 -&gt; 拉取（可选）-&gt; 推送</p><p>2.小智 -&gt; 拉取（后续也可以开发代码 -&gt; … -&gt; 推送）</p><p>3.想要看到别人同步上去的最新内容：git pull origin master 等价于 </p><p>git fetch origin master:master（获取远程分支记录到本地，未合并）</p><p>git merge origin/master (把远程分支记录合并到所在分支下）</p><p><img src="images/image-20230529130044971.png" alt="image-20230529130044971"></p><h2 id="19-VSCode-中使用-Git"><a href="#19-VSCode-中使用-Git" class="headerlink" title="19.VSCode 中使用 Git"></a>19.VSCode 中使用 Git</h2><p>使用：源代码管理，进行暂存，撤销，对比差异，提交等操作</p><p>注意：VSCode 打开的项目文件夹下需要有 .git 仓库</p><p><img src="images/image-20230529130105619.png" alt="image-20230529130105619"></p><h2 id="20-案例-发布黑马头条数据管理平台"><a href="#20-案例-发布黑马头条数据管理平台" class="headerlink" title="20.案例-发布黑马头条数据管理平台"></a>20.案例-发布黑马头条数据管理平台</h2><p>需求：把 Webpack 压缩好的 dist 分发文件夹网页，部署到码云上，开启 Page 服务在互联网中浏览</p><p>步骤：</p><p>1.初始化本地 Git 仓库（这次是非空文件夹-配套素材 dist 文件夹）</p><p>2.初始化远程 Git 仓库（这一次也是非空的）</p><p>3.本地配置远程仓库链接</p><p>4.本地拉取合并一下（确认本地要包含远程内容时使用）</p><p>5.本地推送到远程 Git 仓库</p><p>6.开启 page 网页服务得到地址浏览</p><h2 id="21-Git-常用命令"><a href="#21-Git-常用命令" class="headerlink" title="21.Git 常用命令"></a>21.Git 常用命令</h2><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git remote add 远程仓库别名 远程仓库地址</td><td>添加远程仓库地址</td><td>别名唯一，地址是 .git 结尾的网址</td></tr><tr><td>git remote -v</td><td>查看远程仓库地址</td><td></td></tr><tr><td>git remote remove 远程仓库别名</td><td>删除远程仓库地址</td><td></td></tr><tr><td>git pull 远程仓库别名 分支名</td><td>拉取</td><td>完整写法：git pull 远程仓库别名 远程分支名:本地分支名  等价于：git fetch 和 git merge</td></tr><tr><td>git push 远程仓库别名 分支名</td><td>推送</td><td>完整写法：git push 远程仓库别名 本地分支名:远程分支名  -u：建立通道后以后可以简写 git push</td></tr><tr><td>git pull —rebase 远程仓库别名 分支名</td><td>拉取合并</td><td>合并没有关系的记录</td></tr><tr><td>git clone 远程仓库地址</td><td>克隆</td><td>从0得到一个远程的Git仓库到本地使用</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础第一天</title>
      <link href="/post/d316227c.html"/>
      <url>/post/d316227c.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础-第1天"><a href="#JavaScript-基础-第1天" class="headerlink" title="JavaScript 基础 - 第1天"></a>JavaScript 基础 - 第1天</h1><blockquote><p>了解变量、数据类型、运算符等基础概念，能够实现数据类型的转换，结合四则运算体会如何编程。</p></blockquote><ul><li>体会现实世界中的事物与计算机的关系</li><li>理解什么是数据并知道数据的分类</li><li>理解变量存储数据的“容器”</li><li>掌握常见运算符的使用，了解优先级关系</li><li>知道 JavaScript 数据类型隐式转换的特征</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>掌握 JavaScript 的引入方式，初步认识 JavaScript 的作用</p></blockquote><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p><h4 id="内部方式"><a href="#内部方式" class="headerlink" title="内部方式"></a>内部方式</h4><p>通过 <code>script</code> 标签包裹 JavaScript 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部形式"><a href="#外部形式" class="headerlink" title="外部形式"></a>外部形式</h4><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 script 标签使用 src 属性引入了某 .js 文件，那么 标签的代码会被忽略！！！如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处的代码会被忽略掉！！！！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="number">666</span>);  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释和结束符"><a href="#注释和结束符" class="headerlink" title="注释和结束符"></a>注释和结束符</h3><p>通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：</p><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>使用 <code>//</code> 注释单行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种是单行注释的语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次只能注释一行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复注释</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>使用 <code>/* */</code> 注释多行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 这种的是多行注释的语法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    更常见的多行注释是这种写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    在些可以任意换行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    多少行都可以</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：编辑器中单行注释的快捷键为 <code>ctrl + /</code></strong></p><h3 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h3><p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用回车（enter）替代。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 结束符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line">    alert(1);</span><br><span class="line">    alert(2);</span><br><span class="line">    alert(1)</span><br><span class="line">    alert(2)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p><p>举例说明：如按键盘上的方向键，向上/下键可以滚动页面，按向上/下键这个动作叫作输入，页面发生了滚动了这便叫输出。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>JavaScript 可以接收用户的输入，然后再将输入的结果输出：</p><p><code>alert()</code>、<code>document.wirte()</code></p><p>以数字为例，向 <code>alert()</code> 或 <code>document.write()</code>输入任意数字，他都会以弹窗形式展示（输出）给用户。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 输入输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 输入的任意数字，都会以弹窗形式展示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;要输出的内容&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>理解变量是计算机存储数据的“容器”，掌握变量的声明方式</p></blockquote><p>变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆，通俗的理解变量就是使用【某个符号】来代表【某个具体的数值】（数据）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// x 符号代表了 5 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  x = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// y 符号代表了 6 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  y = <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//举例： 在 JavaScript 中使用变量可以将某个数据（数值）记录下来！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 将用户输入的内容保存在 num 这个变量（容器）中</span></span></span><br><span class="line"><span class="language-javascript">  num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一数字!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过 num 变量（容器）将用户输入的内容输出出来</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(num)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(num)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 变量名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 <code>let</code> 的含义是声明变量的，看到 <code>let</code>  后就可想到这行代码的意思是在声明变量，如 <code>let age;</code> </p><p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量！！！</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 赋值，将 18 这个数据存入了 age 这个“容器”中</span></span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这样 age 的值就成了 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(age)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 也可以声明和赋值同时进行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(str);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>JavaScript 使用专门的关键字 <code>let</code> 和 <code>var</code> 来声明（定义）变量，在使用时需要注意一些细节：</p><p>以下是使用 <code>let</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li>不允许重复声明</li><li>允许同时声明多个变量并赋值</li><li>JavaScript 中内置的一些关键字不能被当做变量名</li></ol><p>以下是使用 <code>var</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li>允许重复声明</li><li>允许同时声明多个变量并赋值</li></ol><p>大部分情况使用 <code>let</code> 和 <code>var</code> 区别不大，但是 <code>let</code> 相较 <code>var</code> 更严谨，因此推荐使用 <code>let</code>，后期会更进一步介绍二者间的区别。</p><h3 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h3><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p><ol><li>只能是字母、数字、下划线、$，且不能能数字开头</li><li>字母区分大小写，如 Age 和 age 是不同的变量</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>尽量保证变量具有一定的语义，见字知义</li></ol><p>注：所谓关键字是指 JavaScript 内部使用的词语，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 变量名命名规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age1 = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> _age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 1age = 18; // 错误，不可以数字开头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Age</span> = <span class="number">24</span> <span class="comment">// 正确，它与小写的 age 是不同的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let let = 18; // 错误，let 是关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> int = <span class="number">123</span> <span class="comment">// 不推荐，int 是保留字</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>概念：使用 const 声明的变量称为“常量”。</p><p>使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let。</p><p>命名规范：和变量一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>计算机世界中的万事成物都是数据。</p></blockquote><p>计算机程序可以处理大量的数据，为了方便数据的管理，将数据分成了不同的类型：</p><p>注：通过 typeof 关键字检测数据类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测 1 是什么类型数据，结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>即我们数学中学习到的数字，可以是整数、小数、正数、负数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> score = <span class="number">100</span> <span class="comment">// 正整数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> price = <span class="number">12.345</span> <span class="comment">// 小数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> temperature = -<span class="number">40</span> <span class="comment">// 负数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> score) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> price) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> temperature) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>通过单引号（ <code>&#39;&#39;</code>） 、双引号（ <code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p><p>注意事项：</p><ol><li>无论单引号或是双引号必须成对使用</li><li>单引号/双引号可以互相嵌套，但是不以自已嵌套自已</li><li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user_name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">// 使用单引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gender = <span class="string">&quot;男&quot;</span> <span class="comment">// 使用双引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 看上去是数字，但是用引号包裹了就成了字符串了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str1 = <span class="string">&#x27;&#x27;</span> <span class="comment">// 这种情况叫空字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> user_name) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> gender) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> str) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 <code>true</code> 和 <code>false</code>，表示肯定的数据用 <code>true</code>，表示否定的数据用 <code>false</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  pink老师帅不帅？回答 是 或 否</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> isCool = <span class="literal">true</span> <span class="comment">// 是的，摔死了！</span></span></span><br><span class="line"><span class="language-javascript">    isCool = <span class="literal">false</span> <span class="comment">// 不，套马杆的汉子！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> isCool) <span class="comment">// 结果为 boolean</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只声明了变量，并末赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tmp;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> tmp) <span class="comment">// 结果为 undefined</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：JavaScript 中变量的值决定了变量的数据类型。</strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><blockquote><p>理解弱类型语言的特征，掌握显式类型转换的方法</p></blockquote><p>在 JavaScript 中数据被分成了不同的类型，如数值、字符串、布尔值、undefined，在实际编程的过程中，不同数据类型之间存在着转换的关系。</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 132</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后 + 将两个字符串拼接到了一起</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后数值 13 减去 数值 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="title function_">prompt</span>(<span class="string">&#x27;请再输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：数据类型的隐式转换是 JavaScript 的特征，后续学习中还会遇到，目前先需要理解什么是隐式转换。</p><p>补充介绍模板字符串的拼接的使用</p><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code>（Not a Number）即不是一个数字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> t = <span class="string">&#x27;12&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> f = <span class="number">8</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显式将字符串 12 转换成数值 12</span></span></span><br><span class="line"><span class="language-javascript">    t = <span class="title class_">Number</span>(t)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测转换后的类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof t);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t + f) <span class="comment">// 结果为 20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并不是所有的值都可以被转成数值类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将 hello 转成数值是不现实的，当无法转换成</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数值时，得到的结果为 NaN （Not a Number）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/post/15832afd.html"/>
      <url>/post/15832afd.html</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>mybatis是一个用于持久层的，轻量级的半自动化ORM框架</p><h2 id="mybatis的优缺点"><a href="#mybatis的优缺点" class="headerlink" title="mybatis的优缺点"></a>mybatis的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>sql写在xml中，便于统一管理和优化</li><li>解除sql与程序代码的耦合</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql，满足不同业务需求</li><li>更新文件类型，老天保佑</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring重点整理</title>
      <link href="/post/88689677.html"/>
      <url>/post/88689677.html</url>
      
        <content type="html"><![CDATA[<p>在Spring中引用外部配置文件：1.需要导入context命名空间</p><pre><code>            2. &lt;context:property-placeholder location = &quot;jdbc.properties&quot;/&gt;            &lt;bean id=&quot;dataSource&quot; class=&quot;com.powernode.spring6.beans.MyDataSource&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;            &lt;/bean&gt;</code></pre><p>声明Bean的注解：@Component<br>        @Controller  应用在控制器类上使用<br>        @Service     service类上使用<br>        @Repository  dao类上使用<br>        他们都是只有一个Value属性，value属性用来指定bean的id，也就是bean的名字</p><p>Spring注解的使用：第一步：加入aop的依赖  (当加入spring-context依赖之后，会关联加入aop的依赖)<br>          第二步：在配置文件中添加context命名空间  xmlns:context=”<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>“ <a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br><a href="http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;">http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</a><br>          第三步：在配置文件中指定扫描的包 <context:component-scan base-package="com.powernode.spring6.bean"/><br>          第四步：在Bean类上使用注解</p><pre><code>      注意事项：1. 如果注解的属性名是value，那么value是可以省略的            2. 如果把value属性彻底去掉，spring会给Bean自动取名。并且默认名字的规律是：Bean类名首字母小写即可        </code></pre><p>负责注入的注解：@Value       1. 当属性的类型是简单类型时，可以使用@Value注解进行注入</p><pre><code>             2. @Value注解可以出现在属性上、setter方法上、以及构造方法的形参上             3. 为了简化代码，以后我们一般不提供setter方法，直接在属性上使用@Value注解完成属性赋值    @Autowired   1. @Autowired注解可以用来注入非简单类型。被翻译为：自动连线的，或者自动装配。 单独使用@Autowired注解，默认根据类型装配。【默认是byType】             2. @Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。                         3. 当带参数的构造方法只有一个，@Autowired注解可以省略。                 4. @Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。         @Qualifier    @Resource    1. @Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。byType注入时，某种类型的Bean只能有一个             2. @Resource注解用在属性上、setter方法上。             3. @Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。】            &lt;dependency&gt;                &lt;groupId&gt;jakarta.annotation&lt;/groupId&gt;                &lt;artifactId&gt;jakarta.annotation-api&lt;/artifactId&gt;                &lt;version&gt;2.1.1&lt;/version&gt;            &lt;/dependency&gt;</code></pre><p>全注解式开发：所谓的全注解开发就是不再使用spring配置文件了。写一个配置类来代替配置文件。<br>           @Configuration  代替spring.xml配置文件<br>           @ComponentScan({“com.powernode.spring6.dao”}) 代替全局扫描<br>           测试程序：ApplicationContext applicationContext = new AnnotationConfigApplicationContext(Spring6Configuration.class);</p><p>动态代理： 在程序运行阶段，在内存中动态生成代理类，被称为动态代理，目的是为了减少代理类的数量。解决代码复用的问<br>题。 在内存当中动态生成类的技术常见的包括：<br>                      JDK动态代理技术：只能代理接口。<br>                      CGLIB动态代理技术：CGLIB(Code Generation Library)是一个开源项目。是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。它既可以代理接口，又可以代理类，底层是通过继承的方式实现的。性能比JDK动态代理要好。（底层有一个小而快的字节码处理框架ASM。）<br>       JDK动态代理：OrderService orderServiceProxy = Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), 调用处理器对象);<br>            这行代码做了两件事：<br>                        第一件事：在内存中生成了代理类的字节码<br>                        第二件事：创建代理对象<br>            Proxy类全名：java.lang.reflect.Proxy。这是JDK提供的一个类（所以称为JDK动态代理）。主要是通过这个类在内存中生成代理类的字节码。 其中newProxyInstance()方法有三个参数：<br>            第一个参数：类加载器。在内存中生成了字节码，要想执行这个字节码，也是需要先把这个字节码加载到内存当中的。所以要指定使用哪个类加载器加载。<br>            第二个参数：接口类型。代理类和目标类实现相同的接口，所以要通过这个参数告诉JDK动态代理生成的类要实现哪些接口。<br>            第三个参数：调用处理器。这是一个JDK动态代理规定的接口，接口全名：java.lang.reflect.InvocationHandler。显然这是一个回调接口，也就是说调用这个接口中方法的程序已经写好了，就差这个接口的实现类了。<br>                    InvocationHandler接口中有一个方法invoke，这个invoke方法上有三个参数：<br>                    第一个参数：Object proxy。代理对象。设计这个参数只是为了后期的方便，如果想在invoke方法中使用代理对象的话，尽管通过这个参数来使用。<br>                    第二个参数：Method method。目标方法。<br>                    第三个参数：Object[] args。目标方法调用时要传的参数。<br>                    我们将来肯定是要调用“目标方法”的，但要调用目标方法的话，需要“目标对象”的存在，“目标对象”从哪儿来呢？我们可以给TimerInvocationHandler提供一个构造方法，可以通过这个构造方法传过来“目标对象”，</p><pre><code> CGLIB动态代理：CGLIB既可以代理接口，又可以代理类。底层采用继承的方式实现。所以被代理的目标类不能使用final修饰。 使用CGLIB，需要引入它的依赖：        &lt;dependency&gt;           &lt;groupId&gt;cglib&lt;/groupId&gt;           &lt;artifactId&gt;cglib&lt;/artifactId&gt;           &lt;version&gt;3.3.0&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p>面向切面编程：IoC使软件组件松耦合。AOP让你能够捕捉系统中经常使用的功能，把它转化成组件。 AOP（Aspect OrientedProgramming）：面向切面编程，面向方面编程。（AOP是一种编程技术） AOP是对OOP的补充延伸。 AOP底层使用的就是动态代理来实现的。 Spring的AOP使用的动态代理是：JDK动态代理 + CGLIB动态代理技术。Spring在<br>这两种动态代理中灵活切换，如果是代理接口，会默认使用JDK动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用CGLIB。当然，你也可以强制通过一些配置让Spring只使用CGLIB。<br>          用一句话总结AOP：将与核心业务无关的代码独立的抽取出来，形成一个独立的组件，然后以横向交叉的方式应用到业务流程当中的过程被称为AOP。 AOP的优点：<br>            第一：代码复用性增强。<br>            第二：代码易维护。<br>            第三：使开发者更关注业务逻辑。<br>          AOP的七大术语：连接点 Joinpoint   在程序的整个执行流程中，可以织入切面的位置。方法的执行前后，异常抛出之后等位置。<br>                 切点 Pointcut      在程序执行流程中，真正织入切面的方法。（一个切点对应多个连接点）<br>                 通知 Advice        通知又叫增强，就是具体你要织入的代码。通知包括：前置通知、后置通知、环绕通知、异常通知、最终通知<br>                 切面 Aspect        切点 + 通知就是切面。<br>                 织入 Weaving       把通知应用到目标对象上的过程。<br>                 代理对象 Proxy     一个目标对象被织入通知后产生的新对象。<br>                 目标对象 Target    被织入通知的对象。        </p><pre><code>      切点表达式：切点表达式用来定义通知（Advice）往哪些方法上切入。 切入点表达式语法格式：          execution([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表) [异常])             访问控制权限修饰符：   可选项。没写，就是4个权限都包括。写public就表示只包括公开的方法。                             返回值类型：           必填项。表示返回值类型任意。                 全限定类名：        可选项。两个点“..”代表当前包以及子包下的所有类。省略时表示所有的类。             方法名：        必填项。*表示所有方法。set*表示所有的set方法。                 形式参数列表：        必填项() 表示没有参数的方法(..) 参数类型和个数随意的方法(*) 只有一个参数的方法(*, String) 第一个参数类型随意，第二个参数是String的。             异常：            可选项。省略时表示任意异常类型      通知类型：通知类型包括：            前置通知：@Before 目标方法执行之前的通知            后置通知：@AfterReturning 目标方法执行之后的通知            环绕通知：@Around 目标方法之前添加通知，同时目标方法执行之后添加通知。            异常通知：@AfterThrowing 发生异常之后执行的通知            最终通知：@After 放在finally语句块中的通知          全注解式开发AOP：@Configuration  代替spring.xml配置文件               @ComponentScan(&quot;com.powernode.spring6.service&quot;)   代替全局扫描               @EnableAspectJAutoProxy()  代替开启自动代理</code></pre><p>Spring对事务的支持：</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="07cd6245d63899e41698a57b2d2f0f066056728fdc0e3b0b1975c9087b6f2a85">97b2b2fe323604bfc8fe2648fe355975b23eb35769447634b842d26626942eefa53d37c88050116cb57ff30a1e98175578f334aacbe7cba79878c8bb5b78dcc9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 作为日记加密 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
